import { of } from 'rxjs';
import { catchError } from 'rxjs/operators';
import { isLanguageCodePresent } from '../utils/translate.utils';
import { LANGUAGE_CODES, SYS_LANG, localTranslations } from './language-codes';
export class TranslateLoader {
    constructor(http, defaultLanguage = SYS_LANG, prefix = '', suffix = '.json') {
        this.http = http;
        this.defaultLanguage = defaultLanguage;
        this.prefix = prefix;
        this.suffix = suffix;
    }
    getTranslation(lang = SYS_LANG) {
        const langToUse = isLanguageCodePresent(lang, LANGUAGE_CODES) ? lang : this.defaultLanguage;
        return this.http.get(`${this.prefix}/${langToUse}${this.suffix}`).pipe(catchError(() => this.getTranslationFile(lang)));
    }
    /**
     * Get the i18n json file for the requested lang
     * Will be called if no i18n file was found on server for this lang
     *
     * @param lang the lang code
     * @param defaultLanguage default lang code
     */
    getTranslationFile(lang, defaultLanguage = this.defaultLanguage) {
        const translationFile = (lang && localTranslations[lang]) ||
            (defaultLanguage && localTranslations[defaultLanguage]) ||
            localTranslations[SYS_LANG];
        return of(translationFile);
    }
}
// AoT requires an exported function for factories
export function HttpLoaderFactory(http, helpService) {
    const defaultLanguage = helpService.getDefaultLanguage() || SYS_LANG;
    const i18nUrl = helpService.getI18nUrl();
    return new TranslateLoader(http, defaultLanguage, i18nUrl);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNsYXRlLWxvYWRlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2VkYy1wb3BvdmVyLW5nLyIsInNvdXJjZXMiOlsibGliL3RyYW5zbGF0ZS90cmFuc2xhdGUtbG9hZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBYyxFQUFFLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDdEMsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBSTVDLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQ2pFLE9BQU8sRUFBRSxjQUFjLEVBQUUsUUFBUSxFQUFFLGlCQUFpQixFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFFL0UsTUFBTSxPQUFPLGVBQWU7SUFFMUIsWUFBNkIsSUFBZ0IsRUFDaEIsa0JBQWtCLFFBQVEsRUFDbkMsU0FBUyxFQUFFLEVBQ1gsU0FBUyxPQUFPO1FBSFAsU0FBSSxHQUFKLElBQUksQ0FBWTtRQUNoQixvQkFBZSxHQUFmLGVBQWUsQ0FBVztRQUNuQyxXQUFNLEdBQU4sTUFBTSxDQUFLO1FBQ1gsV0FBTSxHQUFOLE1BQU0sQ0FBVTtJQUFHLENBQUM7SUFFeEMsY0FBYyxDQUFDLE9BQWUsUUFBUTtRQUNwQyxNQUFNLFNBQVMsR0FBRyxxQkFBcUIsQ0FBQyxJQUFJLEVBQUUsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQztRQUM1RixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sSUFBSSxTQUFTLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsSUFBSSxDQUNwRSxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxDQUFDLENBQ2hELENBQUM7SUFDSixDQUFDO0lBRUQ7Ozs7OztPQU1HO0lBQ0gsa0JBQWtCLENBQUMsSUFBWSxFQUFFLGtCQUEwQixJQUFJLENBQUMsZUFBZTtRQUM3RSxNQUFNLGVBQWUsR0FBRyxDQUFDLElBQUksSUFBSSxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUN2RCxDQUFDLGVBQWUsSUFBSSxpQkFBaUIsQ0FBQyxlQUFlLENBQUMsQ0FBQztZQUN2RCxpQkFBaUIsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUM5QixPQUFPLEVBQUUsQ0FBQyxlQUFlLENBQUMsQ0FBQztJQUM3QixDQUFDO0NBQ0Y7QUFFRCxrREFBa0Q7QUFDbEQsTUFBTSxVQUFVLGlCQUFpQixDQUFDLElBQWdCLEVBQUUsV0FBd0I7SUFDMUUsTUFBTSxlQUFlLEdBQUcsV0FBVyxDQUFDLGtCQUFrQixFQUFFLElBQUksUUFBUSxDQUFDO0lBQ3JFLE1BQU0sT0FBTyxHQUFHLFdBQVcsQ0FBQyxVQUFVLEVBQUUsQ0FBQztJQUN6QyxPQUFPLElBQUksZUFBZSxDQUFDLElBQUksRUFBRSxlQUFlLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFDN0QsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9ic2VydmFibGUsIG9mIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBjYXRjaEVycm9yIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5pbXBvcnQgeyBIdHRwQ2xpZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgSGVscFNlcnZpY2UgfSBmcm9tICcuLi9oZWxwLnNlcnZpY2UnO1xuaW1wb3J0IHsgaXNMYW5ndWFnZUNvZGVQcmVzZW50IH0gZnJvbSAnLi4vdXRpbHMvdHJhbnNsYXRlLnV0aWxzJztcbmltcG9ydCB7IExBTkdVQUdFX0NPREVTLCBTWVNfTEFORywgbG9jYWxUcmFuc2xhdGlvbnMgfSBmcm9tICcuL2xhbmd1YWdlLWNvZGVzJztcblxuZXhwb3J0IGNsYXNzIFRyYW5zbGF0ZUxvYWRlciB7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBodHRwOiBIdHRwQ2xpZW50LFxuICAgICAgICAgICAgICBwcml2YXRlIHJlYWRvbmx5IGRlZmF1bHRMYW5ndWFnZSA9IFNZU19MQU5HLFxuICAgICAgICAgICAgICBwcml2YXRlIHByZWZpeCA9ICcnLFxuICAgICAgICAgICAgICBwcml2YXRlIHN1ZmZpeCA9ICcuanNvbicpIHt9XG5cbiAgZ2V0VHJhbnNsYXRpb24obGFuZzogc3RyaW5nID0gU1lTX0xBTkcpOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgIGNvbnN0IGxhbmdUb1VzZSA9IGlzTGFuZ3VhZ2VDb2RlUHJlc2VudChsYW5nLCBMQU5HVUFHRV9DT0RFUykgPyBsYW5nIDogdGhpcy5kZWZhdWx0TGFuZ3VhZ2U7XG4gICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQoYCR7dGhpcy5wcmVmaXh9LyR7bGFuZ1RvVXNlfSR7dGhpcy5zdWZmaXh9YCkucGlwZShcbiAgICAgIGNhdGNoRXJyb3IoKCkgPT4gdGhpcy5nZXRUcmFuc2xhdGlvbkZpbGUobGFuZykpXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIGkxOG4ganNvbiBmaWxlIGZvciB0aGUgcmVxdWVzdGVkIGxhbmdcbiAgICogV2lsbCBiZSBjYWxsZWQgaWYgbm8gaTE4biBmaWxlIHdhcyBmb3VuZCBvbiBzZXJ2ZXIgZm9yIHRoaXMgbGFuZ1xuICAgKlxuICAgKiBAcGFyYW0gbGFuZyB0aGUgbGFuZyBjb2RlXG4gICAqIEBwYXJhbSBkZWZhdWx0TGFuZ3VhZ2UgZGVmYXVsdCBsYW5nIGNvZGVcbiAgICovXG4gIGdldFRyYW5zbGF0aW9uRmlsZShsYW5nOiBzdHJpbmcsIGRlZmF1bHRMYW5ndWFnZTogc3RyaW5nID0gdGhpcy5kZWZhdWx0TGFuZ3VhZ2UpOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgIGNvbnN0IHRyYW5zbGF0aW9uRmlsZSA9IChsYW5nICYmIGxvY2FsVHJhbnNsYXRpb25zW2xhbmddKSB8fFxuICAgICAgKGRlZmF1bHRMYW5ndWFnZSAmJiBsb2NhbFRyYW5zbGF0aW9uc1tkZWZhdWx0TGFuZ3VhZ2VdKSB8fFxuICAgICAgbG9jYWxUcmFuc2xhdGlvbnNbU1lTX0xBTkddO1xuICAgIHJldHVybiBvZih0cmFuc2xhdGlvbkZpbGUpO1xuICB9XG59XG5cbi8vIEFvVCByZXF1aXJlcyBhbiBleHBvcnRlZCBmdW5jdGlvbiBmb3IgZmFjdG9yaWVzXG5leHBvcnQgZnVuY3Rpb24gSHR0cExvYWRlckZhY3RvcnkoaHR0cDogSHR0cENsaWVudCwgaGVscFNlcnZpY2U6IEhlbHBTZXJ2aWNlKSB7XG4gIGNvbnN0IGRlZmF1bHRMYW5ndWFnZSA9IGhlbHBTZXJ2aWNlLmdldERlZmF1bHRMYW5ndWFnZSgpIHx8IFNZU19MQU5HO1xuICBjb25zdCBpMThuVXJsID0gaGVscFNlcnZpY2UuZ2V0STE4blVybCgpO1xuICByZXR1cm4gbmV3IFRyYW5zbGF0ZUxvYWRlcihodHRwLCBkZWZhdWx0TGFuZ3VhZ2UsIGkxOG5VcmwpO1xufVxuIl19