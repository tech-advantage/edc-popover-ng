import { of } from 'rxjs';
import { catchError } from 'rxjs/operators';
import { SYS_LANG, localTranslations } from './language-codes';
export class TranslateLoader {
    constructor(http, helpService, defaultLanguage = SYS_LANG, prefix = '', suffix = '.json') {
        this.http = http;
        this.helpService = helpService;
        this.defaultLanguage = defaultLanguage;
        this.prefix = prefix;
        this.suffix = suffix;
    }
    getTranslation(lang = SYS_LANG) {
        const langToUse = this.helpService.isLanguagePresent(lang) ? lang : this.defaultLanguage;
        return this.http.get(`${this.prefix}/${langToUse}${this.suffix}`).pipe(catchError(() => this.getTranslationFile(lang)));
    }
    /**
     * Get the i18n json file for the requested lang
     * Will be called if no i18n file was found on server for this lang
     *
     * @param lang the lang code
     * @param defaultLanguage default lang code
     */
    getTranslationFile(lang, defaultLanguage = this.defaultLanguage) {
        const translationFile = (lang && localTranslations[lang]) ||
            (defaultLanguage && localTranslations[defaultLanguage]) ||
            localTranslations[SYS_LANG];
        return of(translationFile);
    }
}
// AoT requires an exported function for factories
export function HttpLoaderFactory(http, helpService) {
    const defaultLanguage = helpService.getDefaultLanguage() || SYS_LANG;
    const i18nUrl = helpService.getI18nUrl();
    return new TranslateLoader(http, helpService, defaultLanguage, i18nUrl);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNsYXRlLWxvYWRlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2VkYy1wb3BvdmVyLW5nLyIsInNvdXJjZXMiOlsibGliL3RyYW5zbGF0ZS90cmFuc2xhdGUtbG9hZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBYyxFQUFFLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDdEMsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBSTVDLE9BQU8sRUFBRSxRQUFRLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUUvRCxNQUFNLE9BQU8sZUFBZTtJQUUxQixZQUE2QixJQUFnQixFQUNoQixXQUF3QixFQUN4QixrQkFBa0IsUUFBUSxFQUNuQyxTQUFTLEVBQUUsRUFDWCxTQUFTLE9BQU87UUFKUCxTQUFJLEdBQUosSUFBSSxDQUFZO1FBQ2hCLGdCQUFXLEdBQVgsV0FBVyxDQUFhO1FBQ3hCLG9CQUFlLEdBQWYsZUFBZSxDQUFXO1FBQ25DLFdBQU0sR0FBTixNQUFNLENBQUs7UUFDWCxXQUFNLEdBQU4sTUFBTSxDQUFVO0lBQUcsQ0FBQztJQUV4QyxjQUFjLENBQUMsT0FBZSxRQUFRO1FBQ3BDLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQztRQUN6RixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sSUFBSSxTQUFTLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsSUFBSSxDQUNwRSxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxDQUFDLENBQ2hELENBQUM7SUFDSixDQUFDO0lBRUQ7Ozs7OztPQU1HO0lBQ0gsa0JBQWtCLENBQUMsSUFBWSxFQUFFLGtCQUEwQixJQUFJLENBQUMsZUFBZTtRQUM3RSxNQUFNLGVBQWUsR0FBRyxDQUFDLElBQUksSUFBSSxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUN2RCxDQUFDLGVBQWUsSUFBSSxpQkFBaUIsQ0FBQyxlQUFlLENBQUMsQ0FBQztZQUN2RCxpQkFBaUIsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUM5QixPQUFPLEVBQUUsQ0FBQyxlQUFlLENBQUMsQ0FBQztJQUM3QixDQUFDO0NBQ0Y7QUFFRCxrREFBa0Q7QUFDbEQsTUFBTSxVQUFVLGlCQUFpQixDQUFDLElBQWdCLEVBQUUsV0FBd0I7SUFDMUUsTUFBTSxlQUFlLEdBQUcsV0FBVyxDQUFDLGtCQUFrQixFQUFFLElBQUksUUFBUSxDQUFDO0lBQ3JFLE1BQU0sT0FBTyxHQUFHLFdBQVcsQ0FBQyxVQUFVLEVBQUUsQ0FBQztJQUN6QyxPQUFPLElBQUksZUFBZSxDQUFDLElBQUksRUFBRSxXQUFXLEVBQUUsZUFBZSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQzFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPYnNlcnZhYmxlLCBvZiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgY2F0Y2hFcnJvciB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuaW1wb3J0IHsgSHR0cENsaWVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IEhlbHBTZXJ2aWNlIH0gZnJvbSAnLi4vaGVscC5zZXJ2aWNlJztcbmltcG9ydCB7IFNZU19MQU5HLCBsb2NhbFRyYW5zbGF0aW9ucyB9IGZyb20gJy4vbGFuZ3VhZ2UtY29kZXMnO1xuXG5leHBvcnQgY2xhc3MgVHJhbnNsYXRlTG9hZGVyIHtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IGh0dHA6IEh0dHBDbGllbnQsXG4gICAgICAgICAgICAgIHByaXZhdGUgcmVhZG9ubHkgaGVscFNlcnZpY2U6IEhlbHBTZXJ2aWNlLFxuICAgICAgICAgICAgICBwcml2YXRlIHJlYWRvbmx5IGRlZmF1bHRMYW5ndWFnZSA9IFNZU19MQU5HLFxuICAgICAgICAgICAgICBwcml2YXRlIHByZWZpeCA9ICcnLFxuICAgICAgICAgICAgICBwcml2YXRlIHN1ZmZpeCA9ICcuanNvbicpIHt9XG5cbiAgZ2V0VHJhbnNsYXRpb24obGFuZzogc3RyaW5nID0gU1lTX0xBTkcpOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgIGNvbnN0IGxhbmdUb1VzZSA9IHRoaXMuaGVscFNlcnZpY2UuaXNMYW5ndWFnZVByZXNlbnQobGFuZykgPyBsYW5nIDogdGhpcy5kZWZhdWx0TGFuZ3VhZ2U7XG4gICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQoYCR7dGhpcy5wcmVmaXh9LyR7bGFuZ1RvVXNlfSR7dGhpcy5zdWZmaXh9YCkucGlwZShcbiAgICAgIGNhdGNoRXJyb3IoKCkgPT4gdGhpcy5nZXRUcmFuc2xhdGlvbkZpbGUobGFuZykpXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIGkxOG4ganNvbiBmaWxlIGZvciB0aGUgcmVxdWVzdGVkIGxhbmdcbiAgICogV2lsbCBiZSBjYWxsZWQgaWYgbm8gaTE4biBmaWxlIHdhcyBmb3VuZCBvbiBzZXJ2ZXIgZm9yIHRoaXMgbGFuZ1xuICAgKlxuICAgKiBAcGFyYW0gbGFuZyB0aGUgbGFuZyBjb2RlXG4gICAqIEBwYXJhbSBkZWZhdWx0TGFuZ3VhZ2UgZGVmYXVsdCBsYW5nIGNvZGVcbiAgICovXG4gIGdldFRyYW5zbGF0aW9uRmlsZShsYW5nOiBzdHJpbmcsIGRlZmF1bHRMYW5ndWFnZTogc3RyaW5nID0gdGhpcy5kZWZhdWx0TGFuZ3VhZ2UpOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgIGNvbnN0IHRyYW5zbGF0aW9uRmlsZSA9IChsYW5nICYmIGxvY2FsVHJhbnNsYXRpb25zW2xhbmddKSB8fFxuICAgICAgKGRlZmF1bHRMYW5ndWFnZSAmJiBsb2NhbFRyYW5zbGF0aW9uc1tkZWZhdWx0TGFuZ3VhZ2VdKSB8fFxuICAgICAgbG9jYWxUcmFuc2xhdGlvbnNbU1lTX0xBTkddO1xuICAgIHJldHVybiBvZih0cmFuc2xhdGlvbkZpbGUpO1xuICB9XG59XG5cbi8vIEFvVCByZXF1aXJlcyBhbiBleHBvcnRlZCBmdW5jdGlvbiBmb3IgZmFjdG9yaWVzXG5leHBvcnQgZnVuY3Rpb24gSHR0cExvYWRlckZhY3RvcnkoaHR0cDogSHR0cENsaWVudCwgaGVscFNlcnZpY2U6IEhlbHBTZXJ2aWNlKSB7XG4gIGNvbnN0IGRlZmF1bHRMYW5ndWFnZSA9IGhlbHBTZXJ2aWNlLmdldERlZmF1bHRMYW5ndWFnZSgpIHx8IFNZU19MQU5HO1xuICBjb25zdCBpMThuVXJsID0gaGVscFNlcnZpY2UuZ2V0STE4blVybCgpO1xuICByZXR1cm4gbmV3IFRyYW5zbGF0ZUxvYWRlcihodHRwLCBoZWxwU2VydmljZSwgZGVmYXVsdExhbmd1YWdlLCBpMThuVXJsKTtcbn1cbiJdfQ==