import { Injectable } from '@angular/core';
import { HelpService } from './help.service';
import { TranslateService } from './translate/translate-service';
import { PopoverConfig, PopoverContent, PopoverOptions } from 'edc-popover-js';
export class HelpConfigService {
    constructor(helpService, translateService) {
        this.helpService = helpService;
        this.translateService = translateService;
    }
    buildPopoverConfig(primaryKey, subKey, pluginId, lang, placement = 'bottom', customClass) {
        // Get the helper
        return this.helpService.getHelp(primaryKey, subKey, pluginId, lang)
            .then((helper) => this.addContent(helper, primaryKey, subKey, lang))
            .then((config) => this.addLabels(config))
            .then((config) => this.addOptions(config, placement, customClass))
            .catch((err) => {
            console.error(err);
        });
    }
    updateOptions(config, placement, customClass) {
        if (!config) {
            return null;
        }
        config.options.placement = placement;
        config.options.customClass = customClass;
        return config;
    }
    addContent(helper, primaryKey, subKey, lang) {
        const config = new PopoverConfig();
        if (helper) {
            const { language: resolvedLanguage } = helper;
            if (resolvedLanguage !== lang) {
                console.warn(`Requested language ${lang} could not be loaded,
           content will be using default language ${helper.language} instead`);
            }
            // Set translation language for the labels
            this.translateService.setLang(resolvedLanguage);
            const { label: title, description, articles, links } = helper;
            config.content = Object.assign(new PopoverContent(), {
                title, description, articles, links
            });
            // Parse article and links urls
            this.parseUrls(config, primaryKey, subKey, resolvedLanguage);
        }
        else {
            console.error(`Could not load Helper for the key ${primaryKey} and subKey ${subKey}`);
        }
        return config;
    }
    parseUrls(config, primaryKey, subKey, lang) {
        if (!config || !config.content) {
            return;
        }
        const articles = config.content.articles || [];
        const links = config.content.links || [];
        articles.forEach((article, index) => article.url = this.helpService.getContextUrl(primaryKey, subKey, lang, index));
        links.forEach((link) => link.url = this.helpService.getDocumentationUrl(link.id));
    }
    addLabels(config) {
        return this.translateService.getTranslation()
            .then((translations) => {
            config.labels = translations;
            return config;
        })
            .catch(() => config);
    }
    addOptions(config, placement, customClass) {
        config.options = Object.assign(new PopoverOptions(), { placement, customClass });
        const container = this.helpService.getContainer();
        if (container !== 'body') {
            config.options.appendTo = 'parent';
        }
        return config;
    }
}
HelpConfigService.decorators = [
    { type: Injectable }
];
HelpConfigService.ctorParameters = () => [
    { type: HelpService },
    { type: TranslateService }
];
//# sourceMappingURL=data:application/json;base64,