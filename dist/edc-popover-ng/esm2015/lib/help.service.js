import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { EdcClient } from 'edc-client-js';
import { PopoverConfigurationHandler } from './config/popover-configuration-handler';
import { SYS_LANG } from './translate/language-codes';
let HelpService = class HelpService {
    constructor(configurationHandler) {
        this.configurationHandler = configurationHandler;
        this.edcClient = new EdcClient(configurationHandler.getDocPath(), configurationHandler.getHelpPath(), configurationHandler.getPluginId(), true, // Context only, don't load the whole doc
        configurationHandler.getI18nPath());
    }
    getHelp(primaryKey, subKey, pluginId, lang) {
        return this.edcClient.getHelper(primaryKey, subKey, pluginId || this.configurationHandler.getPluginId(), lang);
    }
    getContextUrl(mainKey, subKey, languageCode, articleIndex, pluginId) {
        return this.edcClient.getContextWebHelpUrl(mainKey, subKey, languageCode, articleIndex, pluginId);
    }
    getDocumentationUrl(docId) {
        return this.edcClient.getDocumentationWebHelpUrl(docId);
    }
    getI18nUrl() {
        return this.edcClient.getI18nUrl();
    }
    getPluginId() {
        return this.configurationHandler.getPluginId();
    }
    getIcon() {
        return this.configurationHandler.getIcon() || 'fa-question-circle-o';
    }
    getContainer() {
        return this.configurationHandler.isAppendToBody() ? 'body' : '';
    }
    getDefaultLanguage() {
        return (this.edcClient && this.edcClient.getDefaultLanguage && this.edcClient.getDefaultLanguage()) || SYS_LANG;
    }
    setCurrentLanguage(languageCode) {
        return this.edcClient.setCurrentLanguage(languageCode);
    }
};
HelpService = tslib_1.__decorate([
    Injectable(),
    tslib_1.__metadata("design:paramtypes", [PopoverConfigurationHandler])
], HelpService);
export { HelpService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGVscC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vZWRjLXBvcG92ZXItbmcvIiwic291cmNlcyI6WyJsaWIvaGVscC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxTQUFTLEVBQVUsTUFBTSxlQUFlLENBQUM7QUFDbEQsT0FBTyxFQUFFLDJCQUEyQixFQUFFLE1BQU0sd0NBQXdDLENBQUM7QUFDckYsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBR3RELElBQWEsV0FBVyxHQUF4QixNQUFhLFdBQVc7SUFJdEIsWUFBb0Isb0JBQWlEO1FBQWpELHlCQUFvQixHQUFwQixvQkFBb0IsQ0FBNkI7UUFDbkUsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLFNBQVMsQ0FBQyxvQkFBb0IsQ0FBQyxVQUFVLEVBQUUsRUFDOUQsb0JBQW9CLENBQUMsV0FBVyxFQUFFLEVBQ2xDLG9CQUFvQixDQUFDLFdBQVcsRUFBRSxFQUNsQyxJQUFJLEVBQUUseUNBQXlDO1FBQy9DLG9CQUFvQixDQUFDLFdBQVcsRUFBRSxDQUNuQyxDQUFDO0lBQ0osQ0FBQztJQUVELE9BQU8sQ0FBQyxVQUFrQixFQUFFLE1BQWMsRUFBRSxRQUFpQixFQUFFLElBQWE7UUFDMUUsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxVQUFVLEVBQUUsTUFBTSxFQUFFLFFBQVEsSUFBSSxJQUFJLENBQUMsb0JBQW9CLENBQUMsV0FBVyxFQUFFLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDakgsQ0FBQztJQUVELGFBQWEsQ0FBQyxPQUFlLEVBQUUsTUFBYyxFQUFFLFlBQW9CLEVBQUUsWUFBb0IsRUFBRSxRQUFpQjtRQUMxRyxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsb0JBQW9CLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQUUsWUFBWSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBQ3BHLENBQUM7SUFFRCxtQkFBbUIsQ0FBQyxLQUFhO1FBQy9CLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQywwQkFBMEIsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUMxRCxDQUFDO0lBRUQsVUFBVTtRQUNSLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxVQUFVLEVBQUUsQ0FBQztJQUNyQyxDQUFDO0lBRUQsV0FBVztRQUNULE9BQU8sSUFBSSxDQUFDLG9CQUFvQixDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQ2pELENBQUM7SUFFRCxPQUFPO1FBQ0wsT0FBTyxJQUFJLENBQUMsb0JBQW9CLENBQUMsT0FBTyxFQUFFLElBQUksc0JBQXNCLENBQUM7SUFDdkUsQ0FBQztJQUVELFlBQVk7UUFDVixPQUFPLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxjQUFjLEVBQUUsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7SUFDbEUsQ0FBQztJQUVELGtCQUFrQjtRQUNoQixPQUFPLENBQUMsSUFBSSxDQUFDLFNBQVMsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLGtCQUFrQixJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsa0JBQWtCLEVBQUUsQ0FBQyxJQUFJLFFBQVEsQ0FBQztJQUNsSCxDQUFDO0lBRUQsa0JBQWtCLENBQUMsWUFBb0I7UUFDckMsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLGtCQUFrQixDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQ3pELENBQUM7Q0FDRixDQUFBO0FBaERZLFdBQVc7SUFEdkIsVUFBVSxFQUFFOzZDQUsrQiwyQkFBMkI7R0FKMUQsV0FBVyxDQWdEdkI7U0FoRFksV0FBVyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEVkY0NsaWVudCwgSGVscGVyIH0gZnJvbSAnZWRjLWNsaWVudC1qcyc7XG5pbXBvcnQgeyBQb3BvdmVyQ29uZmlndXJhdGlvbkhhbmRsZXIgfSBmcm9tICcuL2NvbmZpZy9wb3BvdmVyLWNvbmZpZ3VyYXRpb24taGFuZGxlcic7XG5pbXBvcnQgeyBTWVNfTEFORyB9IGZyb20gJy4vdHJhbnNsYXRlL2xhbmd1YWdlLWNvZGVzJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEhlbHBTZXJ2aWNlIHtcblxuICBwcml2YXRlIHJlYWRvbmx5IGVkY0NsaWVudDogRWRjQ2xpZW50O1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgY29uZmlndXJhdGlvbkhhbmRsZXI6IFBvcG92ZXJDb25maWd1cmF0aW9uSGFuZGxlcikge1xuICAgIHRoaXMuZWRjQ2xpZW50ID0gbmV3IEVkY0NsaWVudChjb25maWd1cmF0aW9uSGFuZGxlci5nZXREb2NQYXRoKCksXG4gICAgICBjb25maWd1cmF0aW9uSGFuZGxlci5nZXRIZWxwUGF0aCgpLFxuICAgICAgY29uZmlndXJhdGlvbkhhbmRsZXIuZ2V0UGx1Z2luSWQoKSxcbiAgICAgIHRydWUsIC8vIENvbnRleHQgb25seSwgZG9uJ3QgbG9hZCB0aGUgd2hvbGUgZG9jXG4gICAgICBjb25maWd1cmF0aW9uSGFuZGxlci5nZXRJMThuUGF0aCgpXG4gICAgKTtcbiAgfVxuXG4gIGdldEhlbHAocHJpbWFyeUtleTogc3RyaW5nLCBzdWJLZXk6IHN0cmluZywgcGx1Z2luSWQ/OiBzdHJpbmcsIGxhbmc/OiBzdHJpbmcpOiBQcm9taXNlPEhlbHBlcj4ge1xuICAgIHJldHVybiB0aGlzLmVkY0NsaWVudC5nZXRIZWxwZXIocHJpbWFyeUtleSwgc3ViS2V5LCBwbHVnaW5JZCB8fCB0aGlzLmNvbmZpZ3VyYXRpb25IYW5kbGVyLmdldFBsdWdpbklkKCksIGxhbmcpO1xuICB9XG5cbiAgZ2V0Q29udGV4dFVybChtYWluS2V5OiBzdHJpbmcsIHN1YktleTogc3RyaW5nLCBsYW5ndWFnZUNvZGU6IHN0cmluZywgYXJ0aWNsZUluZGV4OiBudW1iZXIsIHBsdWdpbklkPzogc3RyaW5nKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5lZGNDbGllbnQuZ2V0Q29udGV4dFdlYkhlbHBVcmwobWFpbktleSwgc3ViS2V5LCBsYW5ndWFnZUNvZGUsIGFydGljbGVJbmRleCwgcGx1Z2luSWQpO1xuICB9XG5cbiAgZ2V0RG9jdW1lbnRhdGlvblVybChkb2NJZDogbnVtYmVyKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5lZGNDbGllbnQuZ2V0RG9jdW1lbnRhdGlvbldlYkhlbHBVcmwoZG9jSWQpO1xuICB9XG5cbiAgZ2V0STE4blVybCgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLmVkY0NsaWVudC5nZXRJMThuVXJsKCk7XG4gIH1cblxuICBnZXRQbHVnaW5JZCgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLmNvbmZpZ3VyYXRpb25IYW5kbGVyLmdldFBsdWdpbklkKCk7XG4gIH1cblxuICBnZXRJY29uKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuY29uZmlndXJhdGlvbkhhbmRsZXIuZ2V0SWNvbigpIHx8ICdmYS1xdWVzdGlvbi1jaXJjbGUtbyc7XG4gIH1cblxuICBnZXRDb250YWluZXIoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5jb25maWd1cmF0aW9uSGFuZGxlci5pc0FwcGVuZFRvQm9keSgpID8gJ2JvZHknIDogJyc7XG4gIH1cblxuICBnZXREZWZhdWx0TGFuZ3VhZ2UoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gKHRoaXMuZWRjQ2xpZW50ICYmIHRoaXMuZWRjQ2xpZW50LmdldERlZmF1bHRMYW5ndWFnZSAmJiB0aGlzLmVkY0NsaWVudC5nZXREZWZhdWx0TGFuZ3VhZ2UoKSkgfHwgU1lTX0xBTkc7XG4gIH1cblxuICBzZXRDdXJyZW50TGFuZ3VhZ2UobGFuZ3VhZ2VDb2RlOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLmVkY0NsaWVudC5zZXRDdXJyZW50TGFuZ3VhZ2UobGFuZ3VhZ2VDb2RlKTtcbiAgfVxufVxuIl19