{"version":3,"sources":["ng://edc-popover-ng/lib/config/popover-configuration-handler.ts","ng://edc-popover-ng/lib/help.service.ts","ng://edc-popover-ng/lib/help.constants.ts","ng://edc-popover-ng/lib/help.component.ts","ng://edc-popover-ng/lib/help.module.ts"],"names":["PopoverConfigurationHandler","HelpService","configurationHandler","this","helpPath","getHelpPath","edcClient","EdcClient","getDocPath","getPluginId","prototype","getHelp","primaryKey","subKey","pluginId","getHelper","getIcon","getContainer","isAppendToBody","Injectable","HelpComponent","helpService","HelpConstants","MESSAGE_COMING_SOON","ngOnInit","_this","key","setTimeout","then","helper","err","console","warn","iconCss","container","goToArticle","index","basePath","url","open","goToLink","link","id","getPlacement","placement","cancelClick","$event","preventDefault","window","Component","args","selector","template","Input","HelpModule","forRoot","config","ngModule","providers","configLoader","NgModule","imports","CommonModule","PopoverModule","declarations","exports","entryComponents"],"mappings":"mcACA,IAAAA,iBCDAC,EAAA,WAUE,SAAAA,EAAoBC,GAAAC,KAAAD,qBAAAA,EAClBC,KAAKC,SAAWF,EAAqBG,cAErCF,KAAKG,UAAY,IAAIC,EAAAA,UAAUL,EAAqBM,aAAc,GAAIN,EAAqBO,eAAe,UAG5GR,EAAAS,UAAAC,QAAA,SAAQC,EAAoBC,EAAgBC,GAC1C,OAAOX,KAAKG,UAAUS,UAAUH,EAAYC,EAAQC,GAAYX,KAAKD,qBAAqBO,gBAG5FR,EAAAS,UAAAL,YAAA,WACE,OAAOF,KAAKC,UAGdH,EAAAS,UAAAD,YAAA,WACE,OAAON,KAAKD,qBAAqBO,eAGnCR,EAAAS,UAAAM,QAAA,WACE,OAAOb,KAAKD,qBAAqBc,WAAa,wBAGhDf,EAAAS,UAAAO,aAAA,WACE,OAAOd,KAAKD,qBAAqBgB,iBAAmB,OAAS,wBA7BhEC,EAAAA,sDAFQnB,OAFT,2DCC+C,uCCD/CoB,EAAA,WA6DE,SAAAA,EAAoBC,GAAAlB,KAAAkB,YAAAA,kBARPC,EAAcC,mCAKN,gBAKrBH,EAAAV,UAAAc,SAAA,WAAA,IAAAC,EAAAtB,KACMA,KAAKuB,KAAOvB,KAAKU,QACnBc,WAAW,WACTF,EAAKJ,YAAYV,QAAQc,EAAKC,IAAKD,EAAKZ,OAAQY,EAAKX,UAClDc,KAAK,SAACC,GAAmB,OAAAJ,EAAKI,OAASA,GACtC,SAACC,GAAQ,OAAAC,QAAQC,KAAK,+BAAgCF,MACzD,KAEL3B,KAAK8B,QAAU9B,KAAKkB,YAAYL,UAChCb,KAAK+B,UAAY/B,KAAKkB,YAAYJ,gBAGpCG,EAAAV,UAAAyB,YAAA,SAAYC,GACV,IAAMC,EAAWlC,KAAKkB,YAAYhB,cAC5BS,EAAWX,KAAKW,UAAYX,KAAKkB,YAAYZ,cAC/C6B,EAASD,EAAQ,YACjBvB,EACFwB,GAAUxB,EAAQ,IAElBiB,QAAQC,KAAK,2FAEfM,GAAUnC,KAAKuB,IAAG,IAAIvB,KAAKU,OAAM,OAAOuB,EACxCjC,KAAKoC,KAAKD,IAGZlB,EAAAV,UAAA8B,SAAA,SAASC,GACP,IACMH,EADWnC,KAAKkB,YAAYhB,cACX,QAAQoC,EAAKC,GACpCvC,KAAKoC,KAAKD,IAGZlB,EAAAV,UAAAiC,aAAA,WACE,OAAOxC,KAAKyC,WAGdxB,EAAAV,UAAAmC,YAAA,SAAYC,GACVA,EAAOC,kBAGD3B,EAAAV,UAAA6B,cAAKD,GACXU,OAAOT,KAAKD,EAAK,OAAQ,uEAjG5BW,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,WAEVC,SAAU,o9EAPHnD,uCAqDNoD,EAAAA,mBACAA,EAAAA,sBACAA,EAAAA,yBACAA,EAAAA,oBACAA,EAAAA,WA3DH,GCAAC,EAAA,gCA6BSA,EAAAC,QAAP,SAAeC,GACb,MAAO,CACLC,SAAUH,EACVI,UAAW,CACTzD,EACAuD,EAAOG,oCAxBdC,EAAAA,SAAQV,KAAA,CAAC,CACRW,QAAS,CACPC,EAAAA,aACAC,EAAAA,cAAcR,WAEhBS,aAAc,CACZ5C,GAEFsC,UAAW,CACTzD,GAEFgE,QAAS,CACP7C,GAEF8C,gBAAiB,CACf9C,SAzBJ","sourcesContent":["\nexport abstract class PopoverConfigurationHandler {\n\n  abstract getPluginId(): string;\n\n  abstract getHelpPath(): string;\n\n  abstract getDocPath(): string;\n\n  abstract getIcon(): string;\n\n  abstract isAppendToBody(): boolean;\n\n}\n","import { Injectable } from '@angular/core';\nimport { EdcClient, Helper } from 'edc-client-js';\nimport { PopoverConfigurationHandler } from './config/popover-configuration-handler';\n\n@Injectable()\nexport class HelpService {\n\n  private edcClient: EdcClient;\n  private helpPath: string;\n\n  constructor(private configurationHandler: PopoverConfigurationHandler) {\n    this.helpPath = configurationHandler.getHelpPath();\n    // Edc-popover only uses contextual help, instantiate client with contextualOnly parameter set to true\n    this.edcClient = new EdcClient(configurationHandler.getDocPath(), '', configurationHandler.getPluginId(), true);\n  }\n\n  getHelp(primaryKey: string, subKey: string, pluginId?: string): Promise<Helper> {\n    return this.edcClient.getHelper(primaryKey, subKey, pluginId || this.configurationHandler.getPluginId());\n  }\n\n  getHelpPath(): string {\n    return this.helpPath;\n  }\n\n  getPluginId(): string {\n    return this.configurationHandler.getPluginId();\n  }\n\n  getIcon(): string {\n    return this.configurationHandler.getIcon() || 'fa-question-circle-o';\n  }\n\n  getContainer(): string {\n    return this.configurationHandler.isAppendToBody() ? 'body' : '';\n  }\n}\n","export class HelpConstants {\n  public static readonly MESSAGE_COMING_SOON = 'Contextual help is coming soon.';\n}\n","import { Component, OnInit, Input, ViewChild, TemplateRef } from '@angular/core';\nimport { Helper, Link } from 'edc-client-js';\nimport { HelpService } from './help.service';\nimport { HelpConstants } from './help.constants';\nimport { PopoverDirective } from 'ngx-bootstrap';\n\n@Component({\n  selector: 'edc-help',\n  styleUrls: [ 'help.less' ],\n  template: `\n    <!-- Popover template -->\n    <ng-template #popTemplate>\n      <div class=\"edc-popover-container\" (click)=\"$event.stopPropagation()\">\n        <article class=\"popover-article\">{{ helper?.description }}</article>\n        <div class=\"see-also\">\n          <div *ngIf=\"helper?.articles.length\">\n            <h6><strong><span>Need more...</span></strong></h6>\n            <ul class=\"list-unstyled see-also-list\">\n              <li *ngFor=\"let article of helper.articles; let key = index\" class=\"see-also-item\"\n                  (click)=\"goToArticle(key)\">\n                <div class=\"article-link\">-{{article.label}}</div>\n              </li>\n            </ul>\n          </div>\n          <div *ngIf=\"helper?.links.length\">\n            <h6><strong><span>Related Topics</span></strong></h6>\n            <ul class=\"list-unstyled see-also-list\">\n              <li *ngFor=\"let link of helper.links\" class=\"see-also-item\" (click)=\"goToLink(link)\">\n                <div class=\"article-link\">-{{link.label}}</div>\n              </li>\n            </ul>\n          </div>\n        </div>\n      </div>\n    </ng-template>\n\n\n    <!-- app-help template -->\n    <i class=\"fa help-icon {{ iconCss }}\"\n    [popover]=\"helper ? popTemplate : comingSoon\"\n    [popoverTitle]=\"helper?.label\"\n    [placement]=\"getPlacement()\"\n    [ngClass]=\"{'on-dark': dark }\"\n    [container]=\"container\"\n    [outsideClick]=\"true\"\n    (click)=\"cancelClick($event)\">\n    </i>\n  `\n})\nexport class HelpComponent implements OnInit {\n  helper: Helper;\n  container: string;\n  iconCss: string;\n  comingSoon = HelpConstants.MESSAGE_COMING_SOON;\n\n  @Input() pluginId: string; // if defined, the plugin identifier to use for fetching help content\n  @Input() key: string;\n  @Input() subKey: string;\n  @Input() placement = 'bottom';\n  @Input() dark: boolean;\n\n  constructor(private helpService: HelpService) {}\n\n  ngOnInit(): void {\n    if (this.key && this.subKey) {\n      setTimeout(() => { // set timeout because popover content loading is not top priority.\n        this.helpService.getHelp(this.key, this.subKey, this.pluginId)\n          .then((helper: Helper) => this.helper = helper,\n            (err) => console.warn('Contextual Help not found : ', err));\n      }, 2000);\n    }\n    this.iconCss = this.helpService.getIcon();\n    this.container = this.helpService.getContainer();\n  }\n\n  goToArticle(index: number): void {\n    const basePath = this.helpService.getHelpPath();\n    const pluginId = this.pluginId || this.helpService.getPluginId();\n    let url = `${basePath}/context/`;\n    if (pluginId) {\n      url += `${pluginId}/`;\n    } else {\n      console.warn('Please check if plugin Id was correctly set in the edc-popover-ng configuration handler');\n    }\n    url += `${this.key}/${this.subKey}/en/${index}`;\n    this.open(url);\n  }\n\n  goToLink(link: Link): void {\n    const basePath = this.helpService.getHelpPath();\n    const url = `${basePath}/doc/${link.id}`;\n    this.open(url);\n  }\n\n  getPlacement(): string {\n    return this.placement;\n  }\n\n  cancelClick($event: Event): void {\n    $event.preventDefault();\n  }\n\n  private open(url: string): void {\n    window.open(url, 'help', 'scrollbars=1,resizable=1,height=800,width=1200');\n  }\n}\n","import { NgModule, ModuleWithProviders, Provider } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { PopoverModule } from 'ngx-bootstrap/popover';\nimport { HelpComponent } from './help.component';\nimport { HelpService } from './help.service';\n\nexport interface HelpModuleConfig {\n  configLoader: Provider;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    PopoverModule.forRoot()\n  ],\n  declarations: [\n    HelpComponent\n  ],\n  providers: [\n    HelpService\n  ],\n  exports: [\n    HelpComponent\n  ],\n  entryComponents: [\n    HelpComponent\n  ]\n})\nexport class HelpModule {\n  static forRoot(config: HelpModuleConfig): ModuleWithProviders {\n    return {\n      ngModule: HelpModule,\n      providers: [\n        HelpService,\n        config.configLoader\n      ]\n    };\n  }\n}\n"]}