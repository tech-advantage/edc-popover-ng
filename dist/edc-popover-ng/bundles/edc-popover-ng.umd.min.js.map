{"version":3,"sources":["../../../projects/edc-popover-ng/src/lib/config/popover-configuration-handler.ts","../../../projects/edc-popover-ng/src/lib/help.service.ts","../../../projects/edc-popover-ng/src/lib/translate/language-codes.ts","../../../projects/edc-popover-ng/src/lib/translate/default-translations.ts","../../../projects/edc-popover-ng/src/lib/translate/edc-translation.service.ts","../../../projects/edc-popover-ng/src/lib/config/help-config.service.ts","../../../projects/edc-popover-ng/src/lib/help.component.ts","../../../projects/edc-popover-ng/src/lib/help-popover.directive.ts","../../../projects/edc-popover-ng/src/lib/help.module.ts"],"names":["HelpService","configurationHandler","this","edcClient","EdcClient","getDocPath","getHelpPath","getPluginId","getI18nPath","prototype","getHelp","primaryKey","subKey","pluginId","lang","pluginIdentifier","getHelper","getContextUrl","mainKey","languageCode","articleIndex","getContextWebHelpUrl","getDocumentationUrl","docId","getDocumentationWebHelpUrl","getI18nUrl","getPopoverI18nUrl","getIcon","getContainer","isAppendToBody","getDefaultLanguage","isLanguagePresent","langCode","getPopoverTranslation","getPopoverLabels","Injectable","PopoverConfigurationHandler","DEFAULT_LABELS","Map","set","articles","links","iconAlt","comingSoon","errors","failedData","content","url","exportId","EdcTranslationService","helpService","defaultLanguage","getLang","setLang","getTranslation","_this","langToUse","catch","loadDefaultLabels","labelTranslation","get","Promise","resolve","HelpConfigService","translationService","buildPopoverConfig","placement","customClass","then","helper","addContent","config","addLabels","addOptions","err","console","error","updateOptions","options","PopoverConfig","resolvedLanguage","language","warn","title","label","description","Object","assign","PopoverContent","parseUrls","forEach","article","index","link","id","translations","labels","PopoverOptions","container","appendTo","document","body","HelpComponent","helpConfigService","DEFAULT_PLACEMENT","ngOnInit","iconCss","ngOnChanges","changes","some","prop","getIconClasses","classes","push","dark","Component","args","selector","template","encapsulation","ViewEncapsulation","None","Input","HelpPopoverDirective","elementRef","loadPopover","nativeElement","target","popoverInstance","Popover","Directive","ElementRef","HelpModule","forRoot","ngModule","providers","configLoader","NgModule","imports","CommonModule","declarations","exports","entryComponents"],"mappings":"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","sourcesContent":["export abstract class PopoverConfigurationHandler {\n\n  abstract getPluginId(): string;\n\n  abstract getHelpPath(): string;\n\n  abstract getDocPath(): string;\n\n  abstract getIcon(): string;\n\n  abstract isAppendToBody(): boolean;\n\n  abstract getI18nPath(): string;\n\n}\n","import { Injectable } from '@angular/core';\nimport { EdcClient, Helper, PopoverLabel } from 'edc-client-js';\nimport { PopoverConfigurationHandler } from './config/popover-configuration-handler';\nimport { SYS_LANG } from './translate/language-codes';\n\n@Injectable()\nexport class HelpService {\n\n  private readonly edcClient: EdcClient;\n\n  constructor(private configurationHandler: PopoverConfigurationHandler) {\n    this.edcClient = new EdcClient(configurationHandler.getDocPath(),\n      configurationHandler.getHelpPath(),\n      configurationHandler.getPluginId(),\n      true, // Context only, don't load the whole doc\n      configurationHandler.getI18nPath()\n    );\n  }\n\n  getHelp(primaryKey: string, subKey: string, pluginId?: string, lang?: string): Promise<Helper> {\n    const pluginIdentifier = pluginId || this.configurationHandler.getPluginId();\n    return this.edcClient.getHelper(primaryKey, subKey, pluginIdentifier, lang);\n  }\n\n  getContextUrl(mainKey: string, subKey: string, languageCode: string, articleIndex: number, pluginId?: string): string {\n    return this.edcClient.getContextWebHelpUrl(mainKey, subKey, languageCode, articleIndex, pluginId);\n  }\n\n  getDocumentationUrl(docId: number): string {\n    return this.edcClient.getDocumentationWebHelpUrl(docId);\n  }\n\n  getI18nUrl(): string {\n    return this.edcClient.getPopoverI18nUrl();\n  }\n\n  getPluginId(): string {\n    return this.configurationHandler.getPluginId();\n  }\n\n  getIcon(): string {\n    return this.configurationHandler.getIcon() || 'fa-question-circle-o';\n  }\n\n  getContainer(): string {\n    return this.configurationHandler.isAppendToBody() ? 'body' : '';\n  }\n\n  getDefaultLanguage(): string {\n    return (this.edcClient && this.edcClient.getDefaultLanguage && this.edcClient.getDefaultLanguage()) || SYS_LANG;\n  }\n\n  isLanguagePresent(langCode: string): boolean {\n    return this.edcClient.isLanguagePresent(langCode);\n  }\n\n  getPopoverTranslation(langCode: string): Promise<PopoverLabel> {\n    return this.edcClient.getPopoverLabels(langCode);\n  }\n}\n","export const LANGUAGE_CODES = [\n  'en', // English\n  'ar', // Arabic\n  'bg', // Bulgarian\n  'zh', // Chinese\n  'hr', // Croatian\n  'cs', // Czech\n  'da', // Danish\n  'nl', // Dutch\n  'et', // Estonian\n  'fi', // Finnish\n  'fr', // French\n  'de', // German\n  'el', // Greek\n  'he', // Hebrew\n  'hu', // Hungarian\n  'is', // Icelandic\n  'ga', // Irish\n  'it', // Italian\n  'ja', // Japanese\n  'ko', // Korean\n  'lv', // Latvian\n  'lt', // Lithuanian\n  'lb', // Luxembourgish\n  'mt', // Maltese\n  'no', // Norwegian\n  'fa', // Persian\n  'pl', // Polish\n  'pt', // Portuguese\n  'ro', // Romanian\n  'ru', // Russian\n  'sk', // Slovak\n  'sl', // Slovenian\n  'es', // Spanish\n  'sv', // Swedish\n  'tr', // Turkish\n  'vi', // Vietnamese\n];\n\n// Languages with translation contents\nexport const DEFINED_TRANSLATION_CODES = [\n  'en',\n  'fr'\n];\n\nexport const SYS_LANG = 'en';\n","import { PopoverLabel } from 'edc-client-js';\n\nconst LABELS_EN: PopoverLabel = {\n  articles: 'Need more...',\n  links: 'Related topics',\n  iconAlt: 'Help',\n  comingSoon: 'Contextual help is coming soon.',\n  errors: {\n    failedData: 'An error occurred when fetching data !\\\\nCheck the brick keys provided to the EdcHelp component.'\n  },\n  content: null,\n  url: '',\n  exportId: ''\n};\nconst LABELS_FR: PopoverLabel = {\n  articles: 'Plus d\\'info...',\n  links: 'Sujets associés',\n  iconAlt: 'Aide',\n  comingSoon: 'Aide contextuelle à venir.',\n  errors: {\n    failedData: 'Une erreur est survenue lors de la récupération des données !' +\n      '\\\\nVérifiez les clés de la brique fournies au composant EdcHelp.'\n  },\n  content: null,\n  url: '',\n  exportId: ''\n};\n\nexport const DEFAULT_LABELS = new Map<string, PopoverLabel>()\n  .set('en', LABELS_EN)\n  .set('fr', LABELS_FR);\n","import { HelpService } from '../help.service';\nimport { SYS_LANG } from './language-codes';\nimport { Injectable } from '@angular/core';\nimport { DEFAULT_LABELS } from './default-translations';\nimport { PopoverLabel } from 'edc-client-js';\n\n@Injectable()\nexport class EdcTranslationService {\n\n  defaultLanguage = SYS_LANG;\n  lang = SYS_LANG;\n\n  constructor(private readonly helpService: HelpService) {\n  }\n\n  getLang(): string {\n    return this.lang;\n  }\n\n  setLang(lang: string): void {\n    this.lang = lang;\n  }\n\n  getTranslation(lang: string = this.lang): Promise<PopoverLabel> {\n    const langToUse = this.helpService.isLanguagePresent(lang) ? lang : this.defaultLanguage;\n    return this.helpService.getPopoverTranslation(langToUse)\n      .catch(() => this.loadDefaultLabels(lang));\n  }\n\n  /**\n   * Load default popover labels on error\n   *\n   * @param lang the lang code\n   * @param defaultLanguage default lang code\n   */\n  loadDefaultLabels(lang: string, defaultLanguage: string = this.defaultLanguage): Promise<PopoverLabel> {\n    const labelTranslation = DEFAULT_LABELS.get(lang) || DEFAULT_LABELS.get(this.defaultLanguage)\n    || DEFAULT_LABELS.get(SYS_LANG);\n\n    return Promise.resolve(labelTranslation);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HelpService } from '../help.service';\nimport { Article, Helper, Link, PopoverLabel } from 'edc-client-js';\nimport { EdcTranslationService } from '../translate/edc-translation.service';\nimport { PopoverConfig, PopoverContent, PopoverOptions } from 'edc-popover-js';\nimport { Placement } from 'tippy.js';\n\n@Injectable()\nexport class HelpConfigService {\n\n  constructor(private readonly helpService: HelpService,\n              private readonly translationService: EdcTranslationService) {\n  }\n\n  buildPopoverConfig(primaryKey: string,\n                     subKey: string,\n                     pluginId?: string,\n                     lang?: string,\n                     placement = 'bottom',\n                     customClass?: string): Promise<void | PopoverConfig> {\n    // Get the helper\n    return this.helpService.getHelp(primaryKey, subKey, pluginId, lang)\n      .then((helper: Helper) => this.addContent(helper, primaryKey, subKey, lang))\n      .then((config: PopoverConfig) => this.addLabels(config))\n      .then((config: PopoverConfig) => this.addOptions(config, placement, customClass))\n      .catch((err: Error) => {\n        console.error(err);\n      });\n  }\n\n  getIcon(): string {\n    return this.helpService.getIcon();\n  }\n\n  updateOptions(config: PopoverConfig, placement: Placement, customClass: string): PopoverConfig {\n    if (!config) {\n      return null;\n    }\n    config.options.placement = placement;\n    config.options.customClass = customClass;\n    return config;\n  }\n\n  private addContent(helper: Helper, primaryKey: string, subKey: string, lang: string): PopoverConfig {\n    const config = new PopoverConfig();\n    if (helper) {\n      const { language: resolvedLanguage } = helper;\n      if (resolvedLanguage !== lang) {\n        console.warn(`Requested language ${lang} could not be loaded,\n           content will be using default language ${helper.language} instead`);\n      }\n      // Set translation language for the labels\n      this.translationService.setLang(resolvedLanguage);\n      const { label: title, description, articles, links } = helper;\n      config.content = Object.assign(new PopoverContent(), {\n        title, description, articles, links\n      });\n      // Parse article and links urls\n      this.parseUrls(config, primaryKey, subKey, resolvedLanguage, helper.exportId);\n    } else {\n      console.error(`Could not load Helper for the key ${primaryKey} and subKey ${subKey}`);\n    }\n    return config;\n  }\n\n  private parseUrls(config: PopoverConfig, primaryKey: string, subKey: string, lang: string, pluginId?: string): void {\n    if (!config || !config.content) {\n      return;\n    }\n    const articles = config.content.articles || [];\n    const links = config.content.links || [];\n    articles.forEach((article: Article, index: number) =>\n      article.url = this.helpService.getContextUrl(primaryKey, subKey, lang, index, pluginId));\n    links.forEach((link: Link) => link.url = this.helpService.getDocumentationUrl(link.id));\n  }\n\n  private addLabels(config: PopoverConfig): Promise<PopoverConfig> {\n    return this.translationService.getTranslation()\n      .then((translations: PopoverLabel) => {\n        config.labels = translations;\n        return config;\n      })\n      .catch(() => config);\n  }\n\n  private addOptions(config: PopoverConfig, placement: string, customClass: string): PopoverConfig {\n    config.options = Object.assign(new PopoverOptions(), { placement, customClass });\n    const container = this.helpService.getContainer();\n    if (container && container !== 'body') {\n      config.options.appendTo = 'parent';\n    } else {\n      config.options.appendTo = () => document.body;\n    }\n    return config;\n  }\n}\n","import { Component, Input, OnChanges, OnInit, SimpleChanges, ViewEncapsulation } from '@angular/core';\nimport { Helper } from 'edc-client-js';\nimport { HelpService } from './help.service';\nimport { PopoverConfig } from 'edc-popover-js';\nimport { HelpConfigService } from './config/help-config.service';\nimport { Placement } from 'tippy.js';\n\n@Component({\n  selector: 'edc-help',\n  styleUrls: ['help.less'],\n  template: `\n    <i class=\"fa help-icon\" [ngClass]=\"this.getIconClasses()\" edcHelpPopover [config]=\"config\"></i>\n  `,\n  encapsulation: ViewEncapsulation.None\n})\nexport class HelpComponent implements OnInit, OnChanges {\n\n  readonly DEFAULT_PLACEMENT = 'bottom';\n\n  helper: Helper;\n  iconCss: string;\n\n  config: PopoverConfig;\n\n  @Input() pluginId: string; // if defined, the plugin identifier to use for fetching help content\n  @Input() mainKey: string;\n  @Input() subKey: string;\n  @Input() placement: Placement;\n  @Input() dark: boolean;\n  @Input() lang: string;\n  @Input() customClass: string;\n\n  constructor(private readonly helpConfigService: HelpConfigService) {\n  }\n\n  ngOnInit(): void {\n    this.iconCss = this.helpConfigService.getIcon();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    // When at least one of the inputs related to content changes, the configuration must be rebuild\n    const contentTriggers = ['pluginId', 'mainKey', 'subKey', 'lang'];\n    // Those only require to update the configuration options attribute\n    const optionsTriggers = ['placement', 'customClass'];\n    if (contentTriggers.some(prop => changes[prop])) {\n      this.buildPopoverConfig();\n    } else if (optionsTriggers.some(prop => changes[prop])) {\n      this.config = this.helpConfigService.updateOptions(this.config, this.placement, this.customClass);\n    }\n  }\n\n  getIconClasses(): string[] {\n    const classes = [];\n    if (this.iconCss) {\n      classes.push(this.iconCss);\n    }\n    // Set dark class\n    if (this.dark) {\n      classes.push('on-dark');\n    }\n    return classes;\n  }\n\n  private buildPopoverConfig(): void {\n    const placement = this.placement || this.DEFAULT_PLACEMENT;\n    this.helpConfigService.buildPopoverConfig(this.mainKey, this.subKey, this.pluginId, this.lang, placement, this.customClass)\n      .then((config: PopoverConfig) => {\n        this.config = config;\n      });\n  }\n}\n","import { Directive, ElementRef, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { Popover, PopoverConfig } from 'edc-popover-js';\n\n@Directive({ selector: '[edcHelpPopover]' })\nexport class HelpPopoverDirective implements OnChanges {\n\n  popoverInstance;\n\n  @Input() config: PopoverConfig;\n\n  constructor(private elementRef: ElementRef) {\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.loadPopover();\n  }\n\n  private loadPopover(): void {\n    if (this.config && this.elementRef && this.elementRef.nativeElement) {\n      this.config.target = this.elementRef.nativeElement;\n      this.popoverInstance = new Popover(this.config);\n    }\n  }\n}\n","import { ModuleWithProviders, NgModule, Provider } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HelpComponent } from './help.component';\nimport { HelpService } from './help.service';\nimport { EdcTranslationService } from './translate/edc-translation.service';\nimport { HelpPopoverDirective } from './help-popover.directive';\nimport { HelpConfigService } from './config/help-config.service';\n\nimport 'edc-popover-js/dist/edc-popover.css';\n\nexport interface HelpModuleConfig {\n  configLoader: Provider;\n}\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [\n    HelpComponent,\n    HelpPopoverDirective\n  ],\n  providers: [\n    HelpService,\n    EdcTranslationService,\n    HelpConfigService\n  ],\n  exports: [\n    HelpComponent\n  ],\n  entryComponents: [\n    HelpComponent\n  ]\n})\nexport class HelpModule {\n  static forRoot(config: HelpModuleConfig): ModuleWithProviders<HelpModule> {\n    return {\n      ngModule: HelpModule,\n      providers: [\n        HelpService,\n        config.configLoader\n      ]\n    };\n  }\n}\n"]}