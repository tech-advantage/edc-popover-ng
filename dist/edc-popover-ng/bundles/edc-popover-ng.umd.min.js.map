{"version":3,"sources":["../../../projects/edc-popover-ng/src/lib/config/popover-configuration-handler.ts","../../../projects/edc-popover-ng/src/lib/help.service.ts","../../../projects/edc-popover-ng/src/lib/translate/language-codes.ts","../../../projects/edc-popover-ng/src/lib/help.constants.ts","../../../projects/edc-popover-ng/src/lib/translate/edc-translation.service.ts","../../../projects/edc-popover-ng/src/lib/help.component.ts","../../../projects/edc-popover-ng/src/lib/help.module.ts"],"names":["HelpService","configurationHandler","this","edcClient","EdcClient","getDocPath","getHelpPath","getPluginId","getI18nPath","prototype","getHelp","primaryKey","subKey","pluginId","lang","pluginIdentifier","getHelper","getContextUrl","mainKey","languageCode","articleIndex","getContextWebHelpUrl","getDocumentationUrl","docId","getDocumentationWebHelpUrl","getI18nUrl","getPopoverI18nUrl","getIcon","getContainer","isAppendToBody","getDefaultLanguage","isLanguagePresent","langCode","Injectable","PopoverConfigurationHandler","HelpConstants","MESSAGE_COMING_SOON","EdcTranslationService","helpService","defaultLanguage","getLang","setLang","HelpComponent","translationService","comingSoon","placement","ngOnInit","undefined","langLoading","initHelper","iconCss","container","ngOnChanges","changes","currentValue","key","helper","loadHelper","setTimeout","bind","_this","then","Error","resolvedLanguage","language","console","warn","catch","err","error","goToArticle","index","articleUrl","open","goToLink","link","url","id","getPlacement","cancelClick","$event","preventDefault","window","Component","args","selector","template","Input","HelpModule","forRoot","config","ngModule","providers","configLoader","NgModule","imports","CommonModule","declarations","exports","entryComponents"],"mappings":"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EAAAjC,UAAAgE,KAAA,SAAKG,GACXM,OAAOT,KAAKG,EAAK,OAAQ,4EAhG5BO,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,WAEVC,SAAU,oqCARHtF,SAGAqC,uCAcNkD,EAAAA,mBACAA,EAAAA,sBACAA,EAAAA,yBACAA,EAAAA,oBACAA,EAAAA,oBACAA,EAAAA,0BCMH,SAAAC,YACSA,EAAAC,QAAP,SAAeC,GACb,MAAO,CACLC,SAAUH,EACVI,UAAW,CACT5F,EACA0F,EAAOG,yCAxBdC,EAAAA,SAAQV,KAAA,CAAC,CACRW,QAAS,CACPC,EAAAA,cAEFC,aAAc,CACZvD,GAEFkD,UAAW,CACT5F,EACAqC,GAEF6D,QAAS,CACPxD,GAEFyD,gBAAiB,CACfzD,mCJaqC,CACvC,KACA,KACA,KACA,KACA,wEA7C4B,CAC5B,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,iDAYsB","sourcesContent":["\nexport abstract class PopoverConfigurationHandler {\n\n  abstract getPluginId(): string;\n\n  abstract getHelpPath(): string;\n\n  abstract getDocPath(): string;\n\n  abstract getIcon(): string;\n\n  abstract isAppendToBody(): boolean;\n\n  abstract getI18nPath(): string;\n\n}\n","import { Injectable } from '@angular/core';\nimport { EdcClient, Helper } from 'edc-client-js';\nimport { PopoverConfigurationHandler } from './config/popover-configuration-handler';\nimport { SYS_LANG } from './translate/language-codes';\n\n@Injectable()\nexport class HelpService {\n\n  private readonly edcClient: EdcClient;\n\n  constructor(private configurationHandler: PopoverConfigurationHandler) {\n    this.edcClient = new EdcClient(configurationHandler.getDocPath(),\n      configurationHandler.getHelpPath(),\n      configurationHandler.getPluginId(),\n      true, // Context only, don't load the whole doc\n      configurationHandler.getI18nPath()\n    );\n  }\n\n  getHelp(primaryKey: string, subKey: string, pluginId?: string, lang?: string): Promise<Helper> {\n    const pluginIdentifier = pluginId || this.configurationHandler.getPluginId();\n    return this.edcClient.getHelper(primaryKey, subKey, pluginIdentifier, lang);\n  }\n\n  getContextUrl(mainKey: string, subKey: string, languageCode: string, articleIndex: number, pluginId?: string): string {\n    return this.edcClient.getContextWebHelpUrl(mainKey, subKey, languageCode, articleIndex, pluginId);\n  }\n\n  getDocumentationUrl(docId: number): string {\n    return this.edcClient.getDocumentationWebHelpUrl(docId);\n  }\n\n  getI18nUrl(): string {\n    return this.edcClient.getPopoverI18nUrl();\n  }\n\n  getPluginId(): string {\n    return this.configurationHandler.getPluginId();\n  }\n\n  getIcon(): string {\n    return this.configurationHandler.getIcon() || 'fa-question-circle-o';\n  }\n\n  getContainer(): string {\n    return this.configurationHandler.isAppendToBody() ? 'body' : '';\n  }\n\n  getDefaultLanguage(): string {\n    return (this.edcClient && this.edcClient.getDefaultLanguage && this.edcClient.getDefaultLanguage()) || SYS_LANG;\n  }\n\n  isLanguagePresent(langCode: string): boolean {\n    return this.edcClient.isLanguagePresent(langCode);\n  }\n}\n","export const LANGUAGE_CODES = [\n  'en', // English\n  'ar', // Arabic\n  'bg', // Bulgarian\n  'zh', // Chinese\n  'hr', // Croatian\n  'cs', // Czech\n  'da', // Danish\n  'nl', // Dutch\n  'et', // Estonian\n  'fi', // Finnish\n  'fr', // French\n  'de', // German\n  'el', // Greek\n  'he', // Hebrew\n  'hu', // Hungarian\n  'is', // Icelandic\n  'ga', // Irish\n  'it', // Italian\n  'ja', // Japanese\n  'ko', // Korean\n  'lv', // Latvian\n  'lt', // Lithuanian\n  'lb', // Luxembourgish\n  'mt', // Maltese\n  'no', // Norwegian\n  'fa', // Persian\n  'pl', // Polish\n  'pt', // Portuguese\n  'ro', // Romanian\n  'ru', // Russian\n  'sk', // Slovak\n  'sl', // Slovenian\n  'es', // Spanish\n  'sv', // Swedish\n  'tr', // Turkish\n  'vi', // Vietnamese\n];\n\n// Languages with translation contents\nexport const DEFINED_TRANSLATION_CODES = [\n  'en',\n  'fr',\n  'ru',\n  'vi',\n  'zh'\n];\n\nexport const SYS_LANG = 'en';\n","export class HelpConstants {\n  public static readonly MESSAGE_COMING_SOON = 'Contextual help is coming soon.';\n}\n","import { HelpService } from '../help.service';\nimport { SYS_LANG } from './language-codes';\nimport { Injectable } from '@angular/core';\n\n@Injectable()\nexport class EdcTranslationService {\n\n  defaultLanguage = SYS_LANG;\n  lang = SYS_LANG;\n\n  constructor(private readonly helpService: HelpService) {\n  }\n\n  getLang(): string {\n    return this.lang;\n  }\n\n  setLang(lang: string): void {\n    this.lang = lang;\n  }\n}\n","import { Component, OnInit, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { Helper, Link } from 'edc-client-js';\nimport { HelpService } from './help.service';\nimport { HelpConstants } from './help.constants';\nimport { SYS_LANG } from './translate/language-codes';\nimport { EdcTranslationService } from './translate/edc-translation.service';\n\n@Component({\n  selector: 'edc-help',\n  styleUrls: ['help.less'],\n  template: `<i class=\"fa help-icon {{ iconCss }}\"></i>`\n})\nexport class HelpComponent implements OnInit, OnChanges {\n  helper: Helper;\n  container: string;\n  iconCss: string;\n  comingSoon = HelpConstants.MESSAGE_COMING_SOON;\n  langLoading: string; // The lang in use to load the helper - for race conditions\n\n  @Input() pluginId: string; // if defined, the plugin identifier to use for fetching help content\n  @Input() key: string;\n  @Input() subKey: string;\n  @Input() placement = 'bottom';\n  @Input() dark: boolean;\n  @Input() lang: string;\n\n  constructor(private readonly helpService: HelpService, private readonly translationService: EdcTranslationService) {\n  }\n\n  ngOnInit(): void {\n    // If a lang input was provided, helper is already being loaded from ngOnChanges\n    if (this.langLoading === undefined) {\n      // No helper loading in progress from ngOnChanges, so initialize helper\n      this.initHelper();\n    }\n    this.translationService.setLang(SYS_LANG);\n    this.iconCss = this.helpService.getIcon();\n    this.container = this.helpService.getContainer();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes['lang'] && changes['lang'].currentValue !== this.langLoading) {\n      this.initHelper();\n    }\n\n  }\n\n  private initHelper(): void {\n    if (this.key && this.subKey) {\n      this.langLoading = this.lang || null;\n      if (this.helper) {\n        // This is not the first initialization, just an update, skip timeout\n        this.loadHelper();\n      } else {\n        // Set timeout because popover content loading is not a bootstrap top priority.\n        setTimeout(this.loadHelper.bind(this), 2000);\n      }\n    }\n  }\n\n  loadHelper(): void {\n    this.helpService.getHelp(this.key, this.subKey, this.pluginId, this.lang)\n      .then((helper: Helper) => {\n        if (!helper) {\n          throw new Error(`Could not load Helper for the key ${this.key} and subKey ${this.subKey}`);\n        }\n        this.helper = helper;\n        const { language: resolvedLanguage } = helper;\n        if (resolvedLanguage !== this.lang) {\n          console.warn(`Requested language ${this.lang} could not be loaded,\n           content will be using default language ${helper.language} instead`);\n          this.lang = resolvedLanguage;\n        }\n        // Set translation language for the labels\n        this.translationService.setLang(this.lang);\n\n        this.langLoading = null;\n      })\n      .catch((err: Error) => {\n        console.error(err);\n        this.langLoading = null;\n      });\n  }\n\n  goToArticle(index: number): void {\n    const articleUrl = this.helpService.getContextUrl(this.key, this.subKey, this.lang, index);\n    this.open(articleUrl);\n  }\n\n  goToLink(link: Link): void {\n    const url = this.helpService.getDocumentationUrl(link.id);\n    this.open(url);\n  }\n\n  getPlacement(): string {\n    return this.placement;\n  }\n\n  cancelClick($event: Event): void {\n    $event.preventDefault();\n  }\n\n  private open(url: string): void {\n    window.open(url, 'help', 'scrollbars=1,resizable=1,height=800,width=1200');\n  }\n}\n","import { ModuleWithProviders, NgModule, Provider } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HelpComponent } from './help.component';\nimport { HelpService } from './help.service';\nimport { EdcTranslationService } from './translate/edc-translation.service';\n\nimport 'edc-popover-js/dist/edc-popover.css';\n\nexport interface HelpModuleConfig {\n  configLoader: Provider;\n}\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [\n    HelpComponent,\n  ],\n  providers: [\n    HelpService,\n    EdcTranslationService,\n  ],\n  exports: [\n    HelpComponent\n  ],\n  entryComponents: [\n    HelpComponent\n  ]\n})\nexport class HelpModule {\n  static forRoot(config: HelpModuleConfig): ModuleWithProviders<HelpModule> {\n    return {\n      ngModule: HelpModule,\n      providers: [\n        HelpService,\n        config.configLoader\n      ]\n    };\n  }\n}\n"]}