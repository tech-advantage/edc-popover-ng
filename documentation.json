{
    "pipes": [
        {
            "name": "FakeTranslatePipe",
            "id": "pipe-FakeTranslatePipe-ed06becfaafb256f11ccd9f88f5e4098",
            "file": "projects/edc-popover-ng/src/lib/utils/test-helpers.ts",
            "type": "pipe",
            "description": "",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 47,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "translate",
            "sourceCode": "import { NgModule, Pipe, PipeTransform, Provider } from '@angular/core';\nimport { Helper, Article, Link } from 'edc-client-js';\n\nexport function mockService(provide: any, methods: string[] = []): Provider {\n  class MockService {\n  }\n\n  methods.forEach(method => MockService.prototype[method] = () => {\n  });\n  return { provide: provide, useClass: MockService };\n}\n\nexport function mock<T>(type: new(...args: any[]) => T, object: any = {}): T {\n  const entity: T = new type();\n  Object.assign(entity, object);\n  return entity;\n}\n\n/**\n * Mock a documentation helper\n *\n */\nexport function mockHelper(): Helper {\n  return mock(Helper, {\n    label: 'MyTitle',\n    description: 'MyDescription',\n    articles: [\n      mock(Article, {\n        label: 'articleLabel1',\n        url: 'articleUrl1'\n      })\n    ],\n    links: [\n      mock(Link, {\n        id: 7,\n        label: 'linkLabel1',\n        url: 'linkUrl1'\n      })\n    ],\n    language: 'en',\n    exportId: 'resolvedPluginId'\n  });\n}\n\n@Pipe({ name: 'translate' })\nexport class FakeTranslatePipe implements PipeTransform {\n  transform(value: any): any {\n    return value;\n  }\n}\n\n@NgModule({ declarations: [FakeTranslatePipe], exports: [FakeTranslatePipe] })\nexport class TestModule {\n}\n"
        }
    ],
    "interfaces": [
        {
            "name": "EdcPopoverConfiguration",
            "id": "interface-EdcPopoverConfiguration-5270fcffa277ecfab444749aa7062b05",
            "file": "projects/edc-popover-ng/src/lib/config/edc-popover-configuration.ts",
            "type": "interface",
            "sourceCode": "import { IEdcPopoverOptions } from './edc-popover-options.interface';\n\n/**\n * Popover global configuration, to provide when importing the edc help module\n *\n *    pluginId: URL to the help web app.\n *    helpPath: URL to the HTTP served export.\n *    docPath: Export plugin name for the edc documentation.\n *    i18nDirName: Path to the i18n files, containing the labels\n *    options: Popover global options, to apply to all popovers\n *\n */\nexport interface EdcPopoverConfiguration {\n  pluginId: string;\n  helpPath: string;\n  docPath: string;\n  i18nDirName?: string;\n  options?: IEdcPopoverOptions;\n}\n",
            "properties": [
                {
                    "name": "docPath",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "helpPath",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "i18nDirName",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "options",
                    "type": "IEdcPopoverOptions",
                    "optional": true,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "pluginId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "description": "<p>Popover global configuration, to provide when importing the edc help module</p>\n<div><pre class=\"line-numbers\"><code class=\"language-none\">pluginId: URL to the help web app.\nhelpPath: URL to the HTTP served export.\ndocPath: Export plugin name for the edc documentation.\ni18nDirName: Path to the i18n files, containing the labels\noptions: Popover global options, to apply to all popovers</code></pre></div>",
            "methods": []
        },
        {
            "name": "HelpModuleConfig",
            "id": "interface-HelpModuleConfig-dcd9fae37d835bef18ceb3f65c887767",
            "file": "projects/edc-popover-ng/src/lib/help.module.ts",
            "type": "interface",
            "sourceCode": "import { ModuleWithProviders, NgModule, Provider } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HelpComponent } from './help.component';\nimport { HelpService } from './services/help.service';\nimport { EdcTranslationService } from './services/edc-translation.service';\nimport { HelpPopoverDirective } from './help-popover.directive';\nimport { HelpConfigService } from './services/help-config.service';\nimport { HelpIconService } from './services/help-icon.service';\nimport { HelpErrorService } from './services/help-error.service';\nimport { HelpPopoverService } from './services/help-popover.service';\n\nexport interface HelpModuleConfig {\n  configLoader: Provider;\n}\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [\n    HelpComponent,\n    HelpPopoverDirective\n  ],\n  providers: [\n    HelpService,\n    EdcTranslationService,\n    HelpConfigService,\n    HelpIconService,\n    HelpErrorService,\n    HelpPopoverService\n  ],\n  exports: [\n    HelpComponent\n  ],\n  entryComponents: [\n    HelpComponent\n  ]\n})\nexport class HelpModule {\n  static forRoot(config: HelpModuleConfig): ModuleWithProviders<HelpModule> {\n    return {\n      ngModule: HelpModule,\n      providers: [\n        HelpService,\n        config.configLoader\n      ]\n    };\n  }\n}\n",
            "properties": [
                {
                    "name": "configLoader",
                    "type": "Provider",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IEdcPopoverOptions",
            "id": "interface-IEdcPopoverOptions-6474d0cdb6501d43b2c0138ff3553848",
            "file": "projects/edc-popover-ng/src/lib/config/edc-popover-options.interface.ts",
            "type": "interface",
            "sourceCode": "import { IPopoverOptions } from 'edc-popover-utils';\nimport { FailBehavior } from './fail-behavior';\nimport { PopoverIcon } from './popover-icon';\n\nexport interface IEdcPopoverOptions extends IPopoverOptions {\n  icon?: PopoverIcon;\n  dark?: boolean;\n  failBehavior?: FailBehavior;\n}\n",
            "properties": [
                {
                    "name": "dark",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "failBehavior",
                    "type": "FailBehavior",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "icon",
                    "type": "PopoverIcon",
                    "optional": true,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "extends": "IPopoverOptions"
        }
    ],
    "injectables": [
        {
            "name": "ConfigService",
            "id": "injectable-ConfigService-9e4bd0c89a682fd4de34d1740601190b",
            "file": "src/config/config.service.ts",
            "properties": [
                {
                    "name": "config",
                    "type": "EdcConfiguration",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getConfiguration",
                    "args": [],
                    "optional": false,
                    "returnType": "EdcConfiguration",
                    "typeParameters": [],
                    "line": 21
                },
                {
                    "name": "load",
                    "args": [
                        {
                            "name": "url",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<EdcConfiguration>",
                    "typeParameters": [],
                    "line": 12,
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { EdcConfiguration } from 'src/config/edc-configuration';\nimport { HttpClient } from '@angular/common/http';\n\n@Injectable()\nexport class ConfigService {\n  private config: EdcConfiguration;\n\n  constructor(private http: HttpClient) {\n  }\n\n  load(url: string): Promise<EdcConfiguration> {\n    return new Promise((resolve) => {\n      this.http.get(url).subscribe((config: EdcConfiguration) => {\n          this.config = config;\n          resolve();\n        });\n    });\n  }\n\n  getConfiguration(): EdcConfiguration {\n    return this.config;\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "EdcTranslationService",
            "id": "injectable-EdcTranslationService-8188337431935bf456541918cb7e6484",
            "file": "projects/edc-popover-ng/src/lib/services/edc-translation.service.ts",
            "properties": [
                {
                    "name": "lang",
                    "defaultValue": "SYS_LANG",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methods": [
                {
                    "name": "getLang",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 15
                },
                {
                    "name": "getPopoverLabels",
                    "args": [
                        {
                            "name": "lang",
                            "type": "string",
                            "defaultValue": "this.lang"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<PopoverLabel>",
                    "typeParameters": [],
                    "line": 30,
                    "description": "<p>Returns the popover labels from the i18n files in the publication export</p>\n<p>If an error occurred or no translations were returned, returns default labels</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 694,
                                "end": 698,
                                "flags": 0,
                                "escapedText": "lang"
                            },
                            "type": "string",
                            "defaultValue": "this.lang",
                            "tagName": {
                                "pos": 688,
                                "end": 693,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>the language to use</p>\n"
                        }
                    ]
                },
                {
                    "name": "loadDefaultLabels",
                    "args": [
                        {
                            "name": "lang",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<PopoverLabel>",
                    "typeParameters": [],
                    "line": 42,
                    "description": "<p>Load default popover labels on error</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1143,
                                "end": 1147,
                                "flags": 0,
                                "escapedText": "lang"
                            },
                            "type": "string",
                            "tagName": {
                                "pos": 1137,
                                "end": 1142,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>the lang code</p>\n"
                        }
                    ]
                },
                {
                    "name": "setLang",
                    "args": [
                        {
                            "name": "lang",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "jsdoctags": [
                        {
                            "name": "lang",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { SYS_LANG } from '../translate/language-codes';\nimport { HelpService } from './help.service';\nimport { PopoverLabel } from 'edc-client-js';\nimport { DEFAULT_LABELS } from '../translate/default-translations';\n\n@Injectable()\nexport class EdcTranslationService {\n\n  lang = SYS_LANG;\n\n  constructor(private readonly helpService: HelpService) {\n  }\n\n  getLang(): string {\n    return this.lang;\n  }\n\n  setLang(lang: string): void {\n    this.lang = lang;\n  }\n\n  /**\n   * Returns the popover labels from the i18n files in the publication export\n   *\n   * If an error occurred or no translations were returned, returns default labels\n   *\n   * @param lang the language to use\n   */\n  getPopoverLabels(lang: string = this.lang): Promise<PopoverLabel> {\n    const langToUse = this.helpService.isLanguagePresent(lang) ? lang : SYS_LANG;\n    return this.helpService.getPopoverLabels(langToUse)\n      .then((translations: PopoverLabel) => translations || this.loadDefaultLabels(lang))\n      .catch(() => this.loadDefaultLabels(lang));\n  }\n\n  /**\n   * Load default popover labels on error\n   *\n   * @param lang the lang code\n   */\n  loadDefaultLabels(lang: string): Promise<PopoverLabel> {\n    const labelTranslation = DEFAULT_LABELS.get(lang) || DEFAULT_LABELS.get(SYS_LANG);\n\n    return Promise.resolve(labelTranslation);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "helpService",
                        "type": "HelpService"
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "helpService",
                        "type": "HelpService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "HelpConfigService",
            "id": "injectable-HelpConfigService-55f31e10bc054de8bd7074df59c997d0",
            "file": "projects/edc-popover-ng/src/lib/services/help-config.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "addIconToConfig",
                    "args": [
                        {
                            "name": "config",
                            "type": "IconPopoverConfig"
                        }
                    ],
                    "optional": false,
                    "returnType": "IconPopoverConfig",
                    "typeParameters": [],
                    "line": 119,
                    "description": "<p>Builds the icon configuration from the given options</p>\n",
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4813,
                                "end": 4819,
                                "flags": 0,
                                "escapedText": "config"
                            },
                            "type": "IconPopoverConfig",
                            "tagName": {
                                "pos": 4807,
                                "end": 4812,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>the popover configuration</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 4852,
                                "end": 4859,
                                "flags": 0,
                                "escapedText": "private"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "addOptions",
                    "args": [
                        {
                            "name": "config",
                            "type": "IconPopoverConfig"
                        },
                        {
                            "name": "options",
                            "type": "IEdcPopoverOptions"
                        }
                    ],
                    "optional": false,
                    "returnType": "IconPopoverConfig",
                    "typeParameters": [],
                    "line": 70,
                    "description": "<p>Merges and saves options in the configuration respecting priorities from the different sources.\nIn order - higher levels will overwrite the lower ones :\n    Default options &lt; global options &lt; single popover input options</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2897,
                                "end": 2903,
                                "flags": 0,
                                "escapedText": "config"
                            },
                            "type": "IconPopoverConfig",
                            "tagName": {
                                "pos": 2891,
                                "end": 2896,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>the popover configuration</p>\n"
                        },
                        {
                            "name": {
                                "pos": 2942,
                                "end": 2949,
                                "flags": 0,
                                "escapedText": "options"
                            },
                            "type": "IEdcPopoverOptions",
                            "tagName": {
                                "pos": 2936,
                                "end": 2941,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>the options for this popover</p>\n"
                        }
                    ]
                },
                {
                    "name": "buildPopoverConfig",
                    "args": [
                        {
                            "name": "mainKey",
                            "type": "string"
                        },
                        {
                            "name": "subKey",
                            "type": "string"
                        },
                        {
                            "name": "pluginId",
                            "type": "string",
                            "optional": true
                        },
                        {
                            "name": "lang",
                            "type": "string",
                            "optional": true
                        },
                        {
                            "name": "options",
                            "type": "IEdcPopoverOptions",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void | IconPopoverConfig>",
                    "typeParameters": [],
                    "line": 38,
                    "description": "<p>Creates the popover configuration to generate the icon and the popover elements</p>\n<p>Relies on the edc-client-js to retrieve the help content and the labels from the export\nAdds the given options (placement, style, behavior...)\nPrepares the icon configuration</p>\n<p>If an error occurs, generates an error configuration for a icon / popover,\nbased on the fail behavior options.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1375,
                                "end": 1382,
                                "flags": 0,
                                "escapedText": "mainKey"
                            },
                            "type": "string",
                            "tagName": {
                                "pos": 1369,
                                "end": 1374,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>the brick primary key</p>\n"
                        },
                        {
                            "name": {
                                "pos": 1417,
                                "end": 1423,
                                "flags": 0,
                                "escapedText": "subKey"
                            },
                            "type": "string",
                            "tagName": {
                                "pos": 1411,
                                "end": 1416,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>the brick sub key</p>\n"
                        },
                        {
                            "name": {
                                "pos": 1454,
                                "end": 1462,
                                "flags": 0,
                                "escapedText": "pluginId"
                            },
                            "type": "string",
                            "optional": true,
                            "tagName": {
                                "pos": 1448,
                                "end": 1453,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>the plugin Identifier</p>\n"
                        },
                        {
                            "name": {
                                "pos": 1497,
                                "end": 1501,
                                "flags": 0,
                                "escapedText": "lang"
                            },
                            "type": "string",
                            "optional": true,
                            "tagName": {
                                "pos": 1491,
                                "end": 1496,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>the lang to use</p>\n"
                        },
                        {
                            "name": {
                                "pos": 1530,
                                "end": 1537,
                                "flags": 0,
                                "escapedText": "options"
                            },
                            "type": "IEdcPopoverOptions",
                            "optional": true,
                            "tagName": {
                                "pos": 1524,
                                "end": 1529,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>the options for this popover</p>\n"
                        }
                    ]
                },
                {
                    "name": "getIconClasses",
                    "args": [
                        {
                            "name": "config",
                            "type": "IconPopoverConfig"
                        }
                    ],
                    "optional": false,
                    "returnType": "string | []",
                    "typeParameters": [],
                    "line": 57,
                    "description": "<p>Returns the classes to use for the popover icon</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2406,
                                "end": 2412,
                                "flags": 0,
                                "escapedText": "config"
                            },
                            "type": "IconPopoverConfig",
                            "tagName": {
                                "pos": 2400,
                                "end": 2405,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>the popover configuration</p>\n"
                        }
                    ]
                },
                {
                    "name": "handleError",
                    "args": [
                        {
                            "name": "err",
                            "type": "Error"
                        },
                        {
                            "name": "options",
                            "type": "IEdcPopoverOptions"
                        },
                        {
                            "name": "lang",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<IconPopoverConfig>",
                    "typeParameters": [],
                    "line": 86,
                    "description": "<p>Intercepts help errors, from the client-js or from a content error</p>\n<p>Resolves options, and sends the error to the helpErrorService</p>\n",
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3367,
                                "end": 3370,
                                "flags": 0,
                                "escapedText": "err"
                            },
                            "type": "Error",
                            "tagName": {
                                "pos": 3361,
                                "end": 3366,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>the error</p>\n"
                        },
                        {
                            "name": {
                                "pos": 3393,
                                "end": 3400,
                                "flags": 0,
                                "escapedText": "options"
                            },
                            "type": "IEdcPopoverOptions",
                            "tagName": {
                                "pos": 3387,
                                "end": 3392,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>the options initially passed to the popover</p>\n"
                        },
                        {
                            "name": {
                                "pos": 3457,
                                "end": 3461,
                                "flags": 0,
                                "escapedText": "lang"
                            },
                            "type": "string",
                            "tagName": {
                                "pos": 3451,
                                "end": 3456,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>the language to use, for the labels</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 3504,
                                "end": 3511,
                                "flags": 0,
                                "escapedText": "private"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "resolveOptions",
                    "args": [
                        {
                            "name": "options",
                            "type": "IEdcPopoverOptions"
                        }
                    ],
                    "optional": false,
                    "returnType": "IEdcPopoverOptions",
                    "typeParameters": [],
                    "line": 103,
                    "description": "<p>Resolves the options to use, mixing the 3 levels:\n      - Populate with default options\n      - Overwrites with the global options properties, if defined\n      - Overwrites with popover level options, passed to this particular popover instance</p>\n<p>Skip any undefined property</p>\n",
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4152,
                                "end": 4159,
                                "flags": 0,
                                "escapedText": "options"
                            },
                            "type": "IEdcPopoverOptions",
                            "tagName": {
                                "pos": 4146,
                                "end": 4151,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>the Popover options</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 4186,
                                "end": 4193,
                                "flags": 0,
                                "escapedText": "private"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HelpService } from './help.service';\nimport { Helper } from 'edc-client-js';\nimport { IEdcPopoverOptions } from '../config/edc-popover-options.interface';\nimport { EdcPopoverOptions } from '../config/edc-popover-options';\nimport { copyDefinedProperties } from '../utils/global.utils';\nimport { IconPopoverConfig } from '../config/icon-popover-config';\nimport { HelpIconService } from './help-icon.service';\nimport { IconConfig } from '../config/icon-config';\nimport { HelpPopoverService } from './help-popover.service';\nimport { HelpErrorService } from './help-error.service';\n\n@Injectable()\nexport class HelpConfigService {\n\n  constructor(private readonly helpService: HelpService,\n              private readonly helpIconService: HelpIconService,\n              private readonly helpPopoverService: HelpPopoverService,\n              private readonly helpErrorService: HelpErrorService) {\n  }\n\n  /**\n   * Creates the popover configuration to generate the icon and the popover elements\n   *\n   * Relies on the edc-client-js to retrieve the help content and the labels from the export\n   * Adds the given options (placement, style, behavior...)\n   * Prepares the icon configuration\n   *\n   * If an error occurs, generates an error configuration for a icon / popover,\n   * based on the fail behavior options.\n   *\n   * @param mainKey the brick primary key\n   * @param subKey the brick sub key\n   * @param pluginId the plugin Identifier\n   * @param lang the lang to use\n   * @param options the options for this popover\n   */\n  buildPopoverConfig(mainKey: string,\n                     subKey: string,\n                     pluginId?: string,\n                     lang?: string,\n                     options?: IEdcPopoverOptions): Promise<void | IconPopoverConfig> {\n    // Get the helper from edc-client-js\n    return this.helpService.getHelp(mainKey, subKey, pluginId, lang)\n      .then((helper: Helper) => this.helpPopoverService.addContent(helper, mainKey, subKey, lang))\n      .then((config: IconPopoverConfig) => this.addOptions(config, options))\n      .then((config: IconPopoverConfig) => this.helpPopoverService.addLabels(config))\n      .then((config: IconPopoverConfig) => this.addIconToConfig(config))\n      .catch((err: Error) => this.handleError(err, options, lang));\n  }\n\n  /**\n   * Returns the classes to use for the popover icon\n   *\n   * @param config the popover configuration\n   */\n  getIconClasses(config: IconPopoverConfig): string | string[] {\n    const iconConfig: IconConfig = config && config.iconConfig;\n    return this.helpIconService.getIconClasses(iconConfig);\n  }\n\n  /**\n   * Merges and saves options in the configuration respecting priorities from the different sources.\n   * In order - higher levels will overwrite the lower ones :\n   *    Default options < global options < single popover input options\n   *\n   * @param config the popover configuration\n   * @param options the options for this popover\n   */\n  addOptions(config: IconPopoverConfig, options: IEdcPopoverOptions): IconPopoverConfig {\n    // Update configuration with resolved options\n    config.options = this.resolveOptions(options);\n    return config;\n  }\n\n  /**\n   * Intercepts help errors, from the client-js or from a content error\n   *\n   * Resolves options, and sends the error to the helpErrorService\n   *\n   * @param err the error\n   * @param options the options initially passed to the popover\n   * @param lang the language to use, for the labels\n   * @private\n   */\n  private handleError(err: Error, options: IEdcPopoverOptions, lang: string): Promise<IconPopoverConfig> {\n    // Process options before handing them to the error service\n    const resolvedOptions = this.resolveOptions(options);\n    return this.helpErrorService.handleHelpError(err, resolvedOptions, lang);\n  }\n\n  /**\n   * Resolves the options to use, mixing the 3 levels:\n   *      - Populate with default options\n   *      - Overwrites with the global options properties, if defined\n   *      - Overwrites with popover level options, passed to this particular popover instance\n   *\n   * Skip any undefined property\n   *\n   * @param options the Popover options\n   * @private\n   */\n  private resolveOptions(options: IEdcPopoverOptions): IEdcPopoverOptions {\n    // Start merging global options into default ones to make sure all required values are defined\n    const globalOptions: IEdcPopoverOptions = copyDefinedProperties<IEdcPopoverOptions>(\n      new EdcPopoverOptions(),\n      this.helpService.getPopoverOptions()\n    );\n    // Then override with more specific options from the popover component and set it as config options\n    return copyDefinedProperties<IEdcPopoverOptions>(globalOptions, options);\n  }\n\n  /**\n   * Builds the icon configuration from the given options\n   *\n   * @param config the popover configuration\n   * @private\n   */\n  private addIconToConfig(config: IconPopoverConfig): IconPopoverConfig {\n    config.iconConfig = this.helpIconService.buildIconConfig(config.options, config.labels);\n\n    return config;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "helpService",
                        "type": "HelpService"
                    },
                    {
                        "name": "helpIconService",
                        "type": "HelpIconService"
                    },
                    {
                        "name": "helpPopoverService",
                        "type": "HelpPopoverService"
                    },
                    {
                        "name": "helpErrorService",
                        "type": "HelpErrorService"
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "helpService",
                        "type": "HelpService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "helpIconService",
                        "type": "HelpIconService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "helpPopoverService",
                        "type": "HelpPopoverService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "helpErrorService",
                        "type": "HelpErrorService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "HelpErrorService",
            "id": "injectable-HelpErrorService-e2e954e97c3946cbd4836bf69c40f974",
            "file": "projects/edc-popover-ng/src/lib/services/help-error.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "buildErrorConfig",
                    "args": [
                        {
                            "name": "config",
                            "type": "IconPopoverConfig"
                        }
                    ],
                    "optional": false,
                    "returnType": "IconPopoverConfig",
                    "typeParameters": [],
                    "line": 75,
                    "description": "<p>Builds the configuration object for the error popover</p>\n",
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2657,
                                "end": 2663,
                                "flags": 0,
                                "escapedText": "config"
                            },
                            "type": "IconPopoverConfig",
                            "tagName": {
                                "pos": 2651,
                                "end": 2656,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>the configuration being created</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 2702,
                                "end": 2709,
                                "flags": 0,
                                "escapedText": "private"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "buildErrorContent",
                    "args": [
                        {
                            "name": "labels",
                            "type": "PopoverLabel"
                        },
                        {
                            "name": "failBehavior",
                            "type": "FailBehavior"
                        }
                    ],
                    "optional": false,
                    "returnType": "PopoverContent",
                    "typeParameters": [],
                    "line": 96,
                    "description": "<p>Builds the content for the error popover\nBased on fail behavior icon and popover options</p>\n",
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3260,
                                "end": 3266,
                                "flags": 0,
                                "escapedText": "labels"
                            },
                            "type": "PopoverLabel",
                            "tagName": {
                                "pos": 3254,
                                "end": 3259,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>the popover labels</p>\n"
                        },
                        {
                            "name": {
                                "pos": 3298,
                                "end": 3310,
                                "flags": 0,
                                "escapedText": "failBehavior"
                            },
                            "type": "FailBehavior",
                            "tagName": {
                                "pos": 3292,
                                "end": 3297,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>the behavior options in case of error</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 3355,
                                "end": 3362,
                                "flags": 0,
                                "escapedText": "private"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "handleContentException",
                    "args": [
                        {
                            "name": "options",
                            "type": "IEdcPopoverOptions"
                        },
                        {
                            "name": "lang",
                            "type": "string",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<IconPopoverConfig>",
                    "typeParameters": [],
                    "line": 42,
                    "description": "<p>Handles errors of type content error\nCreates the error popover, with labels and error</p>\n",
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1512,
                                "end": 1519,
                                "flags": 0,
                                "escapedText": "options"
                            },
                            "type": "IEdcPopoverOptions",
                            "tagName": {
                                "pos": 1506,
                                "end": 1511,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>the options that were passed to the popover</p>\n"
                        },
                        {
                            "name": {
                                "pos": 1576,
                                "end": 1580,
                                "flags": 0,
                                "escapedText": "lang"
                            },
                            "type": "string",
                            "optional": true,
                            "tagName": {
                                "pos": 1570,
                                "end": 1575,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>the lang to use for the labels</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 1618,
                                "end": 1625,
                                "flags": 0,
                                "escapedText": "private"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "handleHelpError",
                    "args": [
                        {
                            "name": "err",
                            "type": "Error"
                        },
                        {
                            "name": "options",
                            "type": "IEdcPopoverOptions"
                        },
                        {
                            "name": "lang",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<IconPopoverConfig>",
                    "typeParameters": [],
                    "line": 26,
                    "description": "<p>Handles errors and build a popover containing the error messages</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 902,
                                "end": 905,
                                "flags": 0,
                                "escapedText": "err"
                            },
                            "type": "Error",
                            "tagName": {
                                "pos": 896,
                                "end": 901,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>the error</p>\n"
                        },
                        {
                            "name": {
                                "pos": 928,
                                "end": 935,
                                "flags": 0,
                                "escapedText": "options"
                            },
                            "type": "IEdcPopoverOptions",
                            "tagName": {
                                "pos": 922,
                                "end": 927,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>the options that were passed to the popover initially</p>\n"
                        },
                        {
                            "name": {
                                "pos": 1002,
                                "end": 1006,
                                "flags": 0,
                                "escapedText": "lang"
                            },
                            "type": "string",
                            "tagName": {
                                "pos": 996,
                                "end": 1001,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>the lang to use</p>\n"
                        }
                    ]
                },
                {
                    "name": "handleOtherException",
                    "args": [
                        {
                            "name": "options",
                            "type": "IEdcPopoverOptions"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<IconPopoverConfig>",
                    "typeParameters": [],
                    "line": 64,
                    "description": "<p>Handles exceptions other than content exceptions</p>\n",
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2302,
                                "end": 2309,
                                "flags": 0,
                                "escapedText": "options"
                            },
                            "type": "IEdcPopoverOptions",
                            "tagName": {
                                "pos": 2296,
                                "end": 2301,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>the options that were passed to the popover</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 2360,
                                "end": 2367,
                                "flags": 0,
                                "escapedText": "private"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { PopoverContent } from 'edc-popover-utils';\nimport { FailBehavior, IconBehavior, PopoverBehavior } from '../config/fail-behavior';\nimport { ContentNotFoundError } from '../errors/content-not-found.error';\nimport { IconPopoverConfig } from '../config/icon-popover-config';\nimport { HelpIconService } from './help-icon.service';\nimport { IEdcPopoverOptions } from '../config/edc-popover-options.interface';\nimport { PopoverIcon } from '../config/popover-icon';\nimport { PopoverLabel } from 'edc-client-js';\nimport { HelpPopoverService } from './help-popover.service';\n\n@Injectable()\nexport class HelpErrorService {\n\n  constructor(private readonly helpIconService: HelpIconService,\n              private readonly helpPopoverService: HelpPopoverService) {\n  }\n\n  /**\n   * Handles errors and build a popover containing the error messages\n   *\n   * @param err the error\n   * @param options the options that were passed to the popover initially\n   * @param lang the lang to use\n   */\n  handleHelpError(err: Error, options: IEdcPopoverOptions, lang: string): Promise<IconPopoverConfig> {\n    // If error came when retrieving the labels, just use default and continue with loaded content\n    if (err instanceof ContentNotFoundError) {\n      return this.handleContentException(options, lang);\n    }\n    return this.handleOtherException(options);\n  }\n\n  /**\n   * Handles errors of type content error\n   * Creates the error popover, with labels and error\n   *\n   * @param options the options that were passed to the popover\n   * @param lang the lang to use for the labels\n   * @private\n   */\n  private handleContentException(options: IEdcPopoverOptions, lang?: string): Promise<IconPopoverConfig> {\n    if (!options.failBehavior) {\n      options.failBehavior = new FailBehavior();\n    }\n    if (!options.icon) {\n      options.icon = PopoverIcon.create();\n    }\n\n    const errorConfig: IconPopoverConfig = new IconPopoverConfig();\n    errorConfig.options = options;\n\n    // Retrieve the labels and then create the error popover configuration\n    return this.helpPopoverService.addLabels(errorConfig, lang)\n      .then((config: IconPopoverConfig) => this.buildErrorConfig(config));\n  }\n\n  /**\n   * Handles exceptions other than content exceptions\n   *\n   * @param options the options that were passed to the popover\n   * @private\n   */\n  private handleOtherException(options: IEdcPopoverOptions): Promise<IconPopoverConfig> {\n    // Use content exception handling as default for now\n    return this.handleContentException(options);\n  }\n\n  /**\n   * Builds the configuration object for the error popover\n   *\n   * @param config the configuration being created\n   * @private\n   */\n  private buildErrorConfig(config: IconPopoverConfig): IconPopoverConfig {\n    const options: IEdcPopoverOptions = config.options;\n    config.iconConfig = this.helpIconService.buildErrorIconConfig(options, config.labels);\n\n    // Popover content\n    config.content = this.buildErrorContent(config.labels, options.failBehavior);\n    if (!config.content) {\n      config.disablePopover = true;\n    }\n\n    return config;\n  }\n\n  /**\n   * Builds the content for the error popover\n   * Based on fail behavior icon and popover options\n   *\n   * @param labels the popover labels\n   * @param failBehavior the behavior options in case of error\n   * @private\n   */\n  private buildErrorContent(labels: PopoverLabel, failBehavior: FailBehavior): PopoverContent {\n    let content = new PopoverContent();\n    // Icon behavior options - Hidden and Disabled don't need content\n    if (failBehavior.icon === IconBehavior.HIDDEN || failBehavior.icon === IconBehavior.DISABLED) {\n      return null;\n    }\n    // Popover behavior\n    switch (failBehavior.popover) {\n      case PopoverBehavior.NO_POPOVER:\n        content = null;\n        break;\n      case PopoverBehavior.ERROR_SHOWN:\n        content.title = labels.errorTitle;\n        content.description = labels.errors.failedData;\n        break;\n      case PopoverBehavior.FRIENDLY_MSG:\n        content.description = labels.comingSoon;\n    }\n    return content;\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "helpIconService",
                        "type": "HelpIconService"
                    },
                    {
                        "name": "helpPopoverService",
                        "type": "HelpPopoverService"
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "helpIconService",
                        "type": "HelpIconService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "helpPopoverService",
                        "type": "HelpPopoverService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "HelpIconService",
            "id": "injectable-HelpIconService-09e4f4894001126f4c50b61bc2d030e2",
            "file": "projects/edc-popover-ng/src/lib/services/help-icon.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "buildErrorIconConfig",
                    "args": [
                        {
                            "name": "options",
                            "type": "IEdcPopoverOptions"
                        },
                        {
                            "name": "labels",
                            "type": "PopoverLabel"
                        }
                    ],
                    "optional": false,
                    "returnType": "IconConfig",
                    "typeParameters": [],
                    "line": 158,
                    "description": "<p>Builds a icon configuration for an error, based on the given options</p>\n<p>Adjusts all the configuration values associated with the given icon behavior.</p>\n<p>Behavior will define:\n    icon: use the Error icon if Error behavior was set, else try to use the original icon&#39;s\n    and if not present use default</p>\n<div><pre class=\"line-numbers\"><code class=\"language-none\">icon style: - Shown: will display the normal icon\n            - Error: will add the edc-icon-error class\n            - Hidden: will add the edc-icon-hidden class\n            - DISABLED: will add the edc-icon-disabled class</code></pre></div>",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5611,
                                "end": 5618,
                                "flags": 0,
                                "escapedText": "options"
                            },
                            "type": "IEdcPopoverOptions",
                            "tagName": {
                                "pos": 5605,
                                "end": 5610,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>the popover options</p>\n"
                        },
                        {
                            "name": {
                                "pos": 5651,
                                "end": 5657,
                                "flags": 0,
                                "escapedText": "labels"
                            },
                            "type": "PopoverLabel",
                            "tagName": {
                                "pos": 5645,
                                "end": 5650,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>the labels</p>\n"
                        }
                    ]
                },
                {
                    "name": "buildIconClasses",
                    "args": [
                        {
                            "name": "icon",
                            "type": "PopoverIcon"
                        },
                        {
                            "name": "options",
                            "type": "IEdcPopoverOptions"
                        }
                    ],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 103,
                    "description": "<p>Builds the icon classes from the popover options and icon properties</p>\n<p>Icon can be set either from a css class (ie font-awesome: &#39;fa fa-question-circle-o&#39;),\nor from an url.\nFirst checks if url is provided, and if it is use it to define the icon\nOnly uses class if no url was found. That means that if both were provided,\nonly the url will be used.</p>\n<p>Will also set the dark mode adding it to the class list if dark option is true</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3616,
                                "end": 3620,
                                "flags": 0,
                                "escapedText": "icon"
                            },
                            "type": "PopoverIcon",
                            "tagName": {
                                "pos": 3610,
                                "end": 3615,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>the given icon</p>\n"
                        },
                        {
                            "name": {
                                "pos": 3648,
                                "end": 3655,
                                "flags": 0,
                                "escapedText": "options"
                            },
                            "type": "IEdcPopoverOptions",
                            "tagName": {
                                "pos": 3642,
                                "end": 3647,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>the popover options object, containing the options for the icon</p>\n"
                        }
                    ]
                },
                {
                    "name": "buildIconConfig",
                    "args": [
                        {
                            "name": "options",
                            "type": "IEdcPopoverOptions"
                        },
                        {
                            "name": "labels",
                            "type": "PopoverLabel"
                        }
                    ],
                    "optional": false,
                    "returnType": "IconConfig",
                    "typeParameters": [],
                    "line": 33,
                    "description": "<p>Builds the configuration for the popover icon, based on resolved options</p>\n<p>Generates:\n      - icon: resolved icon properties from the options\n      - iconTooltip: the icon tooltip\n      - iconClasses: the icon main classes</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 944,
                                "end": 951,
                                "flags": 0,
                                "escapedText": "options"
                            },
                            "type": "IEdcPopoverOptions",
                            "tagName": {
                                "pos": 938,
                                "end": 943,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>the popover options from the received input</p>\n"
                        },
                        {
                            "name": {
                                "pos": 1008,
                                "end": 1014,
                                "flags": 0,
                                "escapedText": "labels"
                            },
                            "type": "PopoverLabel",
                            "tagName": {
                                "pos": 1002,
                                "end": 1007,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>the popover labels</p>\n"
                        }
                    ]
                },
                {
                    "name": "buildPopoverIcon",
                    "args": [
                        {
                            "name": "options",
                            "type": "IEdcPopoverOptions"
                        }
                    ],
                    "optional": false,
                    "returnType": "PopoverIcon",
                    "typeParameters": [],
                    "line": 189,
                    "description": "<p>Builds the icon options</p>\n<p>Checks if at least one of the class or url properties should be defined\nIf not, use default icon class</p>\n<p>returns a safe PopoverIcon</p>\n",
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 6882,
                                "end": 6889,
                                "flags": 0,
                                "escapedText": "options"
                            },
                            "type": "IEdcPopoverOptions",
                            "tagName": {
                                "pos": 6876,
                                "end": 6881,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>the popover options</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 6916,
                                "end": 6923,
                                "flags": 0,
                                "escapedText": "private"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "getIconClasses",
                    "args": [
                        {
                            "name": "iconConfig",
                            "type": "IconConfig"
                        }
                    ],
                    "optional": false,
                    "returnType": "string | []",
                    "typeParameters": [],
                    "line": 75,
                    "description": "<p>Returns an array containing the class names for the icon,\nto pass to the angular ngClass directive</p>\n<p>Looks for loaded classes in the icon configuration object\nAdds the error classes if this is a error popover</p>\n<p>If no configuration was found, return an empty string</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2683,
                                "end": 2693,
                                "flags": 0,
                                "escapedText": "iconConfig"
                            },
                            "type": "IconConfig",
                            "tagName": {
                                "pos": 2677,
                                "end": 2682,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>the icon configuration</p>\n"
                        }
                    ]
                },
                {
                    "name": "getIconImageStyle",
                    "args": [
                        {
                            "name": "icon",
                            "type": "PopoverIcon"
                        }
                    ],
                    "optional": false,
                    "returnType": "Partial<CSSStyleDeclaration>",
                    "typeParameters": [],
                    "line": 128,
                    "description": "<p>Returns the css style declaration for the given icon image:\n    - Sets the background image from url\n    - Sets the width and height from the icon properties\n      If width is not defined, uses height\n      Uses Default values for properties if not defined</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4530,
                                "end": 4534,
                                "flags": 0,
                                "escapedText": "icon"
                            },
                            "type": "PopoverIcon",
                            "tagName": {
                                "pos": 4524,
                                "end": 4529,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>the icon image to style</p>\n"
                        }
                    ]
                },
                {
                    "name": "getTooltip",
                    "args": [
                        {
                            "name": "displayTooltip",
                            "type": "boolean"
                        },
                        {
                            "name": "labels",
                            "type": "PopoverLabels"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 60,
                    "description": "<p>Returns the tooltip for the icon, on hover\nUses the &#39;iconAlt&#39; property from the translated popover labels,\nprovided by the the edc-client-js instance</p>\n<p>returns an empty string if displayTooltip option is false,\nor if labels were not found</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2064,
                                "end": 2078,
                                "flags": 0,
                                "escapedText": "displayTooltip"
                            },
                            "type": "boolean",
                            "tagName": {
                                "pos": 2058,
                                "end": 2063,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>true if tooltip should be displayed (from the popover options)</p>\n"
                        },
                        {
                            "name": {
                                "pos": 2154,
                                "end": 2160,
                                "flags": 0,
                                "escapedText": "labels"
                            },
                            "type": "PopoverLabels",
                            "tagName": {
                                "pos": 2148,
                                "end": 2153,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>the translated labels containing the text for the tooltip</p>\n"
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { IEdcPopoverOptions } from '../config/edc-popover-options.interface';\nimport { PopoverLabels } from 'edc-popover-utils';\nimport { PopoverIcon } from '../config/popover-icon';\nimport {\n  DARK_CLASS_NAME, DEFAULT_ICON,\n  ERROR_ICON,\n  IconClass,\n  IMAGE_BACKGROUND_SIZE,\n  IMAGE_CLASS_NAME,\n  IMAGE_HEIGHT,\n  IMAGE_WIDTH\n} from '../constants/style.constant';\nimport { IconBehavior } from '../config/fail-behavior';\nimport { IconConfig } from '../config/icon-config';\nimport { copyDefinedProperties } from '../utils/global.utils';\nimport { PopoverLabel } from 'edc-client-js';\n\n@Injectable()\nexport class HelpIconService {\n\n  /**\n   * Builds the configuration for the popover icon, based on resolved options\n   *\n   * Generates:\n   *      - icon: resolved icon properties from the options\n   *      - iconTooltip: the icon tooltip\n   *      - iconClasses: the icon main classes\n   *\n   * @param options the popover options from the received input\n   * @param labels the popover labels\n   */\n  buildIconConfig(options: IEdcPopoverOptions, labels: PopoverLabel): IconConfig {\n    const iconConfig: IconConfig = new IconConfig();\n    // Get safe icon properties\n    iconConfig.icon = this.buildPopoverIcon(options);\n    // Add icon tooltip if displayTooltip is true\n    iconConfig.iconTooltip = this.getTooltip(options && options.displayTooltip, labels);\n    // Create the icon classes that will be used in the component\n    iconConfig.iconClasses = this.buildIconClasses(iconConfig.icon, options);\n    // Check for any provided url\n    if (iconConfig.icon.url) {\n      // Update icon config with the css style declaration\n      iconConfig.imageStyle = this.getIconImageStyle(iconConfig.icon);\n    }\n    return iconConfig;\n  }\n\n  /**\n   * Returns the tooltip for the icon, on hover\n   * Uses the 'iconAlt' property from the translated popover labels,\n   * provided by the the edc-client-js instance\n   *\n   * returns an empty string if displayTooltip option is false,\n   * or if labels were not found\n   *\n   * @param displayTooltip true if tooltip should be displayed (from the popover options)\n   * @param labels the translated labels containing the text for the tooltip\n   */\n  getTooltip(displayTooltip: boolean, labels: PopoverLabels): string {\n    return (displayTooltip && !!labels) ? labels.iconAlt : '';\n  }\n\n  /**\n   * Returns an array containing the class names for the icon,\n   * to pass to the angular ngClass directive\n   *\n   * Looks for loaded classes in the icon configuration object\n   * Adds the error classes if this is a error popover\n   *\n   * If no configuration was found, return an empty string\n   *\n   * @param iconConfig the icon configuration\n   */\n  getIconClasses(iconConfig: IconConfig): string | string[] {\n    if (!iconConfig) {\n      return '';\n    }\n    const classes = [];\n    if (iconConfig.iconClasses && iconConfig.iconClasses.length) {\n      classes.push(...iconConfig.iconClasses);\n    }\n    if (iconConfig.errorClasses && iconConfig.errorClasses.length) {\n      classes.push(...iconConfig.errorClasses);\n    }\n    return classes;\n  }\n\n  /**\n   * Builds the icon classes from the popover options and icon properties\n   *\n   * Icon can be set either from a css class (ie font-awesome: 'fa fa-question-circle-o'),\n   * or from an url.\n   * First checks if url is provided, and if it is use it to define the icon\n   * Only uses class if no url was found. That means that if both were provided,\n   * only the url will be used.\n   *\n   * Will also set the dark mode adding it to the class list if dark option is true\n   *\n   * @param icon the given icon\n   * @param options the popover options object, containing the options for the icon\n   */\n  buildIconClasses(icon: PopoverIcon, options: IEdcPopoverOptions): string[] {\n    const classes = [];\n    // Set dark class\n    if (options && options.dark) {\n      classes.push(DARK_CLASS_NAME);\n    }\n    // First check if url is present, and set icon as image if it is\n    if (icon && icon.url) {\n      classes.push(IMAGE_CLASS_NAME);\n    } else if (icon.class) {\n      // Only use class for defining the icon if an url was not provided\n      classes.push(icon.class);\n    }\n    return classes;\n  }\n\n  /**\n   * Returns the css style declaration for the given icon image:\n   *    - Sets the background image from url\n   *    - Sets the width and height from the icon properties\n   *      If width is not defined, uses height\n   *      Uses Default values for properties if not defined\n   *\n   * @param icon the icon image to style\n   */\n  getIconImageStyle(icon: PopoverIcon): Partial<CSSStyleDeclaration> {\n    if (!icon || !icon.url) {\n      return null;\n    }\n    // Set given image url as background, and width and height from the icon properties\n    return {\n      background: `url(${icon.url})`,\n      backgroundSize: IMAGE_BACKGROUND_SIZE,\n      height: `${icon.height || IMAGE_HEIGHT}px`,\n      width: `${icon.width || icon.height || IMAGE_WIDTH}px`,\n    };\n  }\n\n  /**\n   * Builds a icon configuration for an error, based on the given options\n   *\n   * Adjusts all the configuration values associated with the given icon behavior.\n   *\n   * Behavior will define:\n   *    icon: use the Error icon if Error behavior was set, else try to use the original icon's\n   *    and if not present use default\n   *\n   *    icon style: - Shown: will display the normal icon\n   *                - Error: will add the edc-icon-error class\n   *                - Hidden: will add the edc-icon-hidden class\n   *                - DISABLED: will add the edc-icon-disabled class\n   *\n   * @param options the popover options\n   * @param labels the labels\n   */\n  buildErrorIconConfig(options: IEdcPopoverOptions, labels: PopoverLabel): IconConfig {\n    // Build common icon config\n    const { icon: iconBehavior } = options.failBehavior;\n    // If behavior for the icon is to display an error icon, update its class\n    if (iconBehavior === IconBehavior.ERROR) {\n      options.icon.class = ERROR_ICON;\n    }\n    // Start building the main icon configuration\n    const iconConfig = this.buildIconConfig(options, labels);\n    // Define the classes associated with each behavior:\n    const errorClasses: Map<IconBehavior, IconClass> = new Map()\n      .set(IconBehavior.SHOWN, IconClass.NONE)\n      .set(IconBehavior.DISABLED, IconClass.DISABLED)\n      .set(IconBehavior.HIDDEN, IconClass.HIDDEN)\n      .set(IconBehavior.ERROR, IconClass.ERROR);\n    // Any specific error class to be added, according to the defined behavior\n    const errorClass = errorClasses.get(iconBehavior);\n    iconConfig.errorClasses = errorClass ? [errorClass] : [];\n    return iconConfig;\n  }\n\n  /**\n   * Builds the icon options\n   *\n   * Checks if at least one of the class or url properties should be defined\n   * If not, use default icon class\n   *\n   * returns a safe PopoverIcon\n   * @param options the popover options\n   * @private\n   */\n  private buildPopoverIcon(options: IEdcPopoverOptions): PopoverIcon {\n    const defaultIcon = PopoverIcon.create();\n    if (!options || !options.icon) {\n      return defaultIcon;\n    }\n    // Make a safe copy from default icon values\n    const mergedIcons = copyDefinedProperties<PopoverIcon>(defaultIcon, options.icon);\n    // Check consistency and clean invalid properties\n    if (!mergedIcons.url || !mergedIcons.url.trim()) {\n      // url property must be null or undefined if not valid\n      mergedIcons.url = null;\n    }\n    if (!mergedIcons.class || !mergedIcons.class.trim()) {\n      // At least one of the class or url properties must be defined, use default values if not\n      mergedIcons.class = mergedIcons.url ? null : DEFAULT_ICON;\n    }\n    return mergedIcons;\n  }\n}\n",
            "type": "injectable"
        },
        {
            "name": "HelpPopoverService",
            "id": "injectable-HelpPopoverService-ae604d993bfcd8c0bb994f2d5434ca45",
            "file": "projects/edc-popover-ng/src/lib/services/help-popover.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "addContent",
                    "args": [
                        {
                            "name": "helper",
                            "type": "Helper"
                        },
                        {
                            "name": "mainKey",
                            "type": "string"
                        },
                        {
                            "name": "subKey",
                            "type": "string"
                        },
                        {
                            "name": "lang",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "IconPopoverConfig",
                    "typeParameters": [],
                    "line": 27,
                    "description": "<p>Adds the popover content</p>\n<p>throws a ContentNotFoundError if helper is not defined</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 725,
                                "end": 731,
                                "flags": 0,
                                "escapedText": "helper"
                            },
                            "type": "Helper",
                            "tagName": {
                                "pos": 719,
                                "end": 724,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>the edc helper that will request the content using the edc-client-js instance</p>\n"
                        },
                        {
                            "name": {
                                "pos": 822,
                                "end": 829,
                                "flags": 0,
                                "escapedText": "mainKey"
                            },
                            "type": "string",
                            "tagName": {
                                "pos": 816,
                                "end": 821,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>the brick primary key</p>\n"
                        },
                        {
                            "name": {
                                "pos": 864,
                                "end": 870,
                                "flags": 0,
                                "escapedText": "subKey"
                            },
                            "type": "string",
                            "tagName": {
                                "pos": 858,
                                "end": 863,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>the brick sub key</p>\n"
                        },
                        {
                            "name": {
                                "pos": 901,
                                "end": 905,
                                "flags": 0,
                                "escapedText": "lang"
                            },
                            "type": "string",
                            "tagName": {
                                "pos": 895,
                                "end": 900,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>the lang to use</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 928,
                                "end": 935,
                                "flags": 0,
                                "escapedText": "private"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "addLabels",
                    "args": [
                        {
                            "name": "config",
                            "type": "IconPopoverConfig"
                        },
                        {
                            "name": "lang",
                            "type": "string",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<IconPopoverConfig>",
                    "typeParameters": [],
                    "line": 52,
                    "description": "<p>Adds labels into the popover configuration</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2052,
                                "end": 2058,
                                "flags": 0,
                                "escapedText": "config"
                            },
                            "type": "IconPopoverConfig",
                            "tagName": {
                                "pos": 2046,
                                "end": 2051,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>the popover configuration being created</p>\n"
                        },
                        {
                            "name": {
                                "pos": 2111,
                                "end": 2115,
                                "flags": 0,
                                "escapedText": "lang"
                            },
                            "type": "string",
                            "optional": true,
                            "tagName": {
                                "pos": 2105,
                                "end": 2110,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>the lang to use</p>\n"
                        }
                    ]
                },
                {
                    "name": "parseUrls",
                    "args": [
                        {
                            "name": "config",
                            "type": "IconPopoverConfig"
                        },
                        {
                            "name": "primaryKey",
                            "type": "string"
                        },
                        {
                            "name": "subKey",
                            "type": "string"
                        },
                        {
                            "name": "lang",
                            "type": "string"
                        },
                        {
                            "name": "pluginId",
                            "type": "string",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "description": "<p>Sets the url attributes for links and articles to open in the web help explorer,\ninserting the help path defined in the global configuration</p>\n",
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2576,
                                "end": 2582,
                                "flags": 0,
                                "escapedText": "config"
                            },
                            "type": "IconPopoverConfig",
                            "tagName": {
                                "pos": 2570,
                                "end": 2575,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>the popover configuration</p>\n"
                        },
                        {
                            "name": "primaryKey",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": {
                                "pos": 2663,
                                "end": 2669,
                                "flags": 0,
                                "escapedText": "subKey"
                            },
                            "type": "string",
                            "tagName": {
                                "pos": 2657,
                                "end": 2662,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>the brick sub key</p>\n"
                        },
                        {
                            "name": {
                                "pos": 2700,
                                "end": 2704,
                                "flags": 0,
                                "escapedText": "lang"
                            },
                            "type": "string",
                            "tagName": {
                                "pos": 2694,
                                "end": 2699,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>the lang to use</p>\n"
                        },
                        {
                            "name": {
                                "pos": 2733,
                                "end": 2741,
                                "flags": 0,
                                "escapedText": "pluginId"
                            },
                            "type": "string",
                            "optional": true,
                            "tagName": {
                                "pos": 2727,
                                "end": 2732,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>the identifier of the published export the keys belong to</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 2806,
                                "end": 2813,
                                "flags": 0,
                                "escapedText": "private"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Article, Helper, Link, PopoverLabel } from 'edc-client-js';\nimport { IconPopoverConfig } from '../config/icon-popover-config';\nimport { ContentNotFoundError } from '../errors/content-not-found.error';\nimport { PopoverContent } from 'edc-popover-utils';\nimport { HelpService } from './help.service';\nimport { EdcTranslationService } from './edc-translation.service';\n\n@Injectable()\nexport class HelpPopoverService {\n\n  constructor(private readonly helpService: HelpService,\n              private readonly translationService: EdcTranslationService) {\n  }\n\n  /**\n   * Adds the popover content\n   *\n   * throws a ContentNotFoundError if helper is not defined\n   *\n   * @param helper the edc helper that will request the content using the edc-client-js instance\n   * @param mainKey the brick primary key\n   * @param subKey the brick sub key\n   * @param lang the lang to use\n   * @private\n   */\n  addContent(helper: Helper, mainKey: string, subKey: string, lang: string): IconPopoverConfig {\n    const config = new IconPopoverConfig();\n    if (!helper) {\n      // The help client could not resolve any helper for the content, throw an error\n      throw new ContentNotFoundError(mainKey, subKey, lang);\n    }\n    // Retrieve the language that the helper resolved, from the requested and the current export state\n    const { language: resolvedLanguage } = helper;\n    // Resolved language might be different from the requested, if content was not available in that language\n    // Keep the language service up to date with the finally used language\n    this.translationService.setLang(resolvedLanguage);\n    // Extract and create the popover content\n    const { label: title, description, articles, links } = helper;\n    config.content = new PopoverContent(title, description, articles, links);\n    // Parse articles and links urls\n    this.parseUrls(config, mainKey, subKey, resolvedLanguage, helper.exportId);\n    return config;\n  }\n\n  /**\n   * Adds labels into the popover configuration\n   *\n   * @param config the popover configuration being created\n   * @param lang the lang to use\n   */\n  addLabels(config: IconPopoverConfig, lang?: string): Promise<IconPopoverConfig> {\n    return this.translationService.getPopoverLabels(lang)\n      .then((translations: PopoverLabel) => {\n        config.labels = translations;\n        return config;\n      });\n  }\n\n  /**\n   * Sets the url attributes for links and articles to open in the web help explorer,\n   * inserting the help path defined in the global configuration\n   *\n   * @param config the popover configuration\n   * @param mainKey the brick primary key\n   * @param subKey the brick sub key\n   * @param lang the lang to use\n   * @param pluginId the identifier of the published export the keys belong to\n   * @private\n   */\n  private parseUrls(config: IconPopoverConfig, primaryKey: string, subKey: string, lang: string, pluginId?: string): void {\n    if (!config || !config.content) {\n      return;\n    }\n    const articles = config.content.articles || [];\n    const links = config.content.links || [];\n    articles.forEach((article: Article, index: number) =>\n      article.url = this.helpService.getContextUrl(primaryKey, subKey, lang, index, pluginId));\n    links.forEach((link: Link) => link.url = this.helpService.getDocumentationUrl(link.id));\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "helpService",
                        "type": "HelpService"
                    },
                    {
                        "name": "translationService",
                        "type": "EdcTranslationService"
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "helpService",
                        "type": "HelpService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "translationService",
                        "type": "EdcTranslationService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "HelpService",
            "id": "injectable-HelpService-0d8c3753680e8c0b3b1c0a25d7011636",
            "file": "projects/edc-popover-ng/src/lib/services/help.service.ts",
            "properties": [
                {
                    "name": "edcClient",
                    "type": "EdcClient",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        112,
                        132
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getContextUrl",
                    "args": [
                        {
                            "name": "mainKey",
                            "type": "string"
                        },
                        {
                            "name": "subKey",
                            "type": "string"
                        },
                        {
                            "name": "languageCode",
                            "type": "string"
                        },
                        {
                            "name": "articleIndex",
                            "type": "number"
                        },
                        {
                            "name": "pluginId",
                            "type": "string",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 27,
                    "jsdoctags": [
                        {
                            "name": "mainKey",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "subKey",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "languageCode",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "articleIndex",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "pluginId",
                            "type": "string",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDefaultLanguage",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 47
                },
                {
                    "name": "getDocumentationUrl",
                    "args": [
                        {
                            "name": "docId",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 31,
                    "jsdoctags": [
                        {
                            "name": "docId",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getHelp",
                    "args": [
                        {
                            "name": "primaryKey",
                            "type": "string"
                        },
                        {
                            "name": "subKey",
                            "type": "string"
                        },
                        {
                            "name": "pluginId",
                            "type": "string",
                            "optional": true
                        },
                        {
                            "name": "lang",
                            "type": "string",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<Helper>",
                    "typeParameters": [],
                    "line": 22,
                    "jsdoctags": [
                        {
                            "name": "primaryKey",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "subKey",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "pluginId",
                            "type": "string",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "lang",
                            "type": "string",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getI18nUrl",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 35
                },
                {
                    "name": "getPluginId",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 39
                },
                {
                    "name": "getPopoverLabels",
                    "args": [
                        {
                            "name": "langCode",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<PopoverLabel>",
                    "typeParameters": [],
                    "line": 55,
                    "jsdoctags": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPopoverOptions",
                    "args": [],
                    "optional": false,
                    "returnType": "IEdcPopoverOptions",
                    "typeParameters": [],
                    "line": 43
                },
                {
                    "name": "isLanguagePresent",
                    "args": [
                        {
                            "name": "langCode",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 51,
                    "jsdoctags": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { EdcClient, Helper, PopoverLabel } from 'edc-client-js';\nimport { PopoverConfigurationHandler } from '../config/popover-configuration-handler';\nimport { SYS_LANG } from '../translate/language-codes';\nimport { IEdcPopoverOptions } from '../config/edc-popover-options.interface';\nimport { EdcPopoverOptions } from '../config/edc-popover-options';\n\n@Injectable()\nexport class HelpService {\n\n  private readonly edcClient: EdcClient;\n\n  constructor(private configurationHandler: PopoverConfigurationHandler) {\n    this.edcClient = new EdcClient(configurationHandler.getDocPath(),\n      configurationHandler.getHelpPath(),\n      configurationHandler.getPluginId(),\n      true, // Context only, don't load the whole doc\n      configurationHandler.getI18nPath()\n    );\n  }\n\n  getHelp(primaryKey: string, subKey: string, pluginId?: string, lang?: string): Promise<Helper> {\n    const pluginIdentifier = pluginId || this.configurationHandler.getPluginId();\n    return this.edcClient.getHelper(primaryKey, subKey, pluginIdentifier, lang);\n  }\n\n  getContextUrl(mainKey: string, subKey: string, languageCode: string, articleIndex: number, pluginId?: string): string {\n    return this.edcClient.getContextWebHelpUrl(mainKey, subKey, languageCode, articleIndex, pluginId);\n  }\n\n  getDocumentationUrl(docId: number): string {\n    return this.edcClient.getDocumentationWebHelpUrl(docId);\n  }\n\n  getI18nUrl(): string {\n    return this.edcClient.getPopoverI18nUrl();\n  }\n\n  getPluginId(): string {\n    return this.configurationHandler.getPluginId();\n  }\n\n  getPopoverOptions(): IEdcPopoverOptions {\n    return this.configurationHandler.getPopoverOptions() || new EdcPopoverOptions();\n  }\n\n  getDefaultLanguage(): string {\n    return (this.edcClient && this.edcClient.getDefaultLanguage && this.edcClient.getDefaultLanguage()) || SYS_LANG;\n  }\n\n  isLanguagePresent(langCode: string): boolean {\n    return this.edcClient.isLanguagePresent(langCode);\n  }\n\n  getPopoverLabels(langCode: string): Promise<PopoverLabel> {\n    return this.edcClient.getPopoverLabels(langCode);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "configurationHandler",
                        "type": "PopoverConfigurationHandler"
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "configurationHandler",
                        "type": "PopoverConfigurationHandler",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "PopoverConfigHandler",
            "id": "injectable-PopoverConfigHandler-9bac870dba6854d1ca721eeb1b339596",
            "file": "src/config/popover-config-handler.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getDocPath",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 15
                },
                {
                    "name": "getHelpPath",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 11
                },
                {
                    "name": "getI18nPath",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 27
                },
                {
                    "name": "getPluginId",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 19
                },
                {
                    "name": "getPopoverOptions",
                    "args": [],
                    "optional": false,
                    "returnType": "IEdcPopoverOptions",
                    "typeParameters": [],
                    "line": 23
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { PopoverConfigurationHandler } from 'projects/edc-popover-ng/src/lib/config/popover-configuration-handler';\nimport { ConfigService } from 'src/config/config.service';\nimport { IEdcPopoverOptions } from '../../projects/edc-popover-ng/src/lib/config/edc-popover-options.interface';\n\n@Injectable()\nexport class PopoverConfigHandler implements PopoverConfigurationHandler {\n\n  constructor(private configService: ConfigService) {}\n\n  getHelpPath(): string {\n    return this.configService.getConfiguration().popover.helpPath;\n  }\n\n  getDocPath(): string {\n    return this.configService.getConfiguration().popover.docPath;\n  }\n\n  getPluginId(): string {\n    return this.configService.getConfiguration().popover.pluginId;\n  }\n\n  getPopoverOptions(): IEdcPopoverOptions {\n    return this.configService.getConfiguration().popover.options;\n  }\n\n  getI18nPath(): string {\n    return this.configService.getConfiguration().popover.i18nPath;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "configService",
                        "type": "ConfigService"
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "configService",
                        "type": "ConfigService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        }
    ],
    "classes": [
        {
            "name": "AppPage",
            "id": "class-AppPage-893f8131b7f2317cc955ec12bb0926d9",
            "file": "e2e/src/app.po.ts",
            "type": "class",
            "sourceCode": "import { browser, by, element } from 'protractor';\n\nexport class AppPage {\n  navigateTo() {\n    return browser.get('/');\n  }\n\n  getParagraphText() {\n    return element(by.css('edc-root h1')).getText();\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "getParagraphText",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 8
                },
                {
                    "name": "navigateTo",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ContentNotFoundError",
            "id": "class-ContentNotFoundError-7aa876efa91837ddff036cb2d54ca41f",
            "file": "projects/edc-popover-ng/src/lib/errors/content-not-found.error.ts",
            "type": "class",
            "sourceCode": "export class ContentNotFoundError extends Error {\n\n  constructor(public mainKey: string,\n              public subKey: string,\n              public lang: string,\n              message?: string) {\n    super(message);\n    this.name = 'ContentNotFoundError';\n    // restore prototype chain, see more at\n    // https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work\n    Object.setPrototypeOf(this, ContentNotFoundError.prototype);\n    // Can remove this when changing target to es6\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "mainKey",
                        "type": "string"
                    },
                    {
                        "name": "subKey",
                        "type": "string"
                    },
                    {
                        "name": "lang",
                        "type": "string"
                    },
                    {
                        "name": "message",
                        "type": "string",
                        "optional": true
                    }
                ],
                "line": 1,
                "jsdoctags": [
                    {
                        "name": "mainKey",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "subKey",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "lang",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "message",
                        "type": "string",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "lang",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "mainKey",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "subKey",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": "Error",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "EdcConfiguration",
            "id": "class-EdcConfiguration-2831d5e85ad3a8a1c6348c63f6a51627",
            "file": "src/config/edc-configuration.ts",
            "type": "class",
            "sourceCode": "import { EdcPopoverConfiguration } from 'projects/edc-popover-ng/src/lib/config/edc-popover-configuration';\nimport { EdcPopoverOptions } from 'edc-popover-ng';\n\n/**\n * Class representing the config.json object in assets folder.\n */\nexport class EdcConfiguration {\n  popover: PopoverConfig;\n}\n\nexport class PopoverConfig implements EdcPopoverConfiguration {\n  helpPath: string;     // The URL to the help web app.\n  docPath: string;      // The URL to the HTTP served export.\n  pluginId: string;     // Export plugin name for the edc documentation.\n  i18nPath?: string;    // Path for internationalization json files in host application\n  options?: EdcPopoverOptions; // Popover options\n}\n",
            "properties": [
                {
                    "name": "popover",
                    "type": "PopoverConfig",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "description": "<p>Class representing the config.json object in assets folder.</p>\n",
            "rawdescription": "Class representing the config.json object in assets folder.",
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "EdcPopoverOptions",
            "id": "class-EdcPopoverOptions-bcca157bd05577233ca3b65dd1d22be7",
            "file": "projects/edc-popover-ng/src/lib/config/edc-popover-options.ts",
            "type": "class",
            "sourceCode": "import { PopoverOptions } from 'edc-popover-utils';\nimport { IEdcPopoverOptions } from './edc-popover-options.interface';\nimport { FailBehavior } from './fail-behavior';\nimport { PopoverIcon } from './popover-icon';\n\n/**\n * Options for the angular-ng popover, extending edc-popover-utils options\n *\n * failBehavior: icon and popover behavior when an error occurs\n * dark: dark mode\n * icon: properties for the popover icon\n *\n */\nexport class EdcPopoverOptions extends PopoverOptions implements IEdcPopoverOptions {\n  failBehavior: FailBehavior = new FailBehavior();\n  dark = false;\n  icon: PopoverIcon = new PopoverIcon();\n}\n",
            "properties": [
                {
                    "name": "dark",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "failBehavior",
                    "defaultValue": "new FailBehavior()",
                    "type": "FailBehavior",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "icon",
                    "defaultValue": "new PopoverIcon()",
                    "type": "PopoverIcon",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "description": "<p>Options for the angular-ng popover, extending edc-popover-utils options</p>\n<p>failBehavior: icon and popover behavior when an error occurs\ndark: dark mode\nicon: properties for the popover icon</p>\n",
            "rawdescription": "Options for the angular-ng popover, extending edc-popover-utils options\n\nfailBehavior: icon and popover behavior when an error occurs\ndark: dark mode\nicon: properties for the popover icon",
            "methods": [],
            "indexSignatures": [],
            "extends": "PopoverOptions",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "IEdcPopoverOptions"
            ]
        },
        {
            "name": "FailBehavior",
            "id": "class-FailBehavior-ec3a34e0675f75bae7803ecb16ebc2ca",
            "file": "projects/edc-popover-ng/src/lib/config/fail-behavior.ts",
            "type": "class",
            "sourceCode": "export enum PopoverBehavior {\n  FRIENDLY_MSG = 'friendlyMsg',\n  ERROR_SHOWN = 'errorShown',\n  NO_POPOVER = 'noPopover'\n}\n\nexport enum IconBehavior {\n  SHOWN = 'shown',\n  DISABLED = 'disabled',\n  HIDDEN = 'hidden',\n  ERROR = 'error'\n}\n\nexport class FailBehavior {\n  popover: PopoverBehavior = PopoverBehavior.FRIENDLY_MSG;\n  icon: IconBehavior = IconBehavior.SHOWN;\n}\n",
            "properties": [
                {
                    "name": "icon",
                    "defaultValue": "IconBehavior.SHOWN",
                    "type": "IconBehavior",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "popover",
                    "defaultValue": "PopoverBehavior.FRIENDLY_MSG",
                    "type": "PopoverBehavior",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "IconConfig",
            "id": "class-IconConfig-943b72bec20db1055709e44a895ea410",
            "file": "projects/edc-popover-ng/src/lib/config/icon-config.ts",
            "type": "class",
            "sourceCode": "import { PopoverIcon } from './popover-icon';\nimport { IconClass } from '../constants/style.constant';\nimport { DEFAULT_LABELS } from '../translate/default-translations';\nimport { SYS_LANG } from '../translate/language-codes';\n\n/**\n * Holds the configuration for the target:\n *    - icon: configuration for the popover icon (also referred as the target)\n *    - iconTooltip: Tooltip to show on hover over the icon\n *    - iconClasses: Array that holds the class names to apply to the icon\n *    - imageStyle: CSS style to apply to the icon element\n *    - errorClasses: the classes to attach to the icon if an error occurred\n */\nexport class IconConfig {\n  icon: PopoverIcon;\n  iconTooltip = DEFAULT_LABELS.get(SYS_LANG).iconAlt;\n  iconClasses: string[] = [];\n  imageStyle: Partial<CSSStyleDeclaration>;\n  errorClasses: IconClass[] = [];\n\n  constructor() {\n    this.icon = PopoverIcon.create();\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 19
            },
            "properties": [
                {
                    "name": "errorClasses",
                    "defaultValue": "[]",
                    "type": "IconClass[]",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "icon",
                    "type": "PopoverIcon",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "iconClasses",
                    "defaultValue": "[]",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "iconTooltip",
                    "defaultValue": "DEFAULT_LABELS.get(SYS_LANG).iconAlt",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "imageStyle",
                    "type": "Partial<CSSStyleDeclaration>",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "description": "<p>Holds the configuration for the target:\n    - icon: configuration for the popover icon (also referred as the target)\n    - iconTooltip: Tooltip to show on hover over the icon\n    - iconClasses: Array that holds the class names to apply to the icon\n    - imageStyle: CSS style to apply to the icon element\n    - errorClasses: the classes to attach to the icon if an error occurred</p>\n",
            "rawdescription": "Holds the configuration for the target:\n    - icon: configuration for the popover icon (also referred as the target)\n    - iconTooltip: Tooltip to show on hover over the icon\n    - iconClasses: Array that holds the class names to apply to the icon\n    - imageStyle: CSS style to apply to the icon element\n    - errorClasses: the classes to attach to the icon if an error occurred",
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "IconPopoverConfig",
            "id": "class-IconPopoverConfig-6420c32774e56844d3daf2ba1b630111",
            "file": "projects/edc-popover-ng/src/lib/config/icon-popover-config.ts",
            "type": "class",
            "sourceCode": "import { PopoverConfig } from 'edc-popover-utils';\nimport { IconConfig } from './icon-config';\nimport { PopoverLabel } from 'edc-client-js';\n\n/**\n * Configuration for both icon and the popover itself\n * Extends the edc-popover-utils configuration.\n * Holds the configuration for the edc-popover-utils, along with other properties necessary for the edc-client-ng1\n *\n *    - iconConfig: Configuration for the icon: classes, style, url...\n *    - disablePopover: Defines popover current disabled state\n *    - labels: Translated labels from the i18n files returned by the edc help client\n */\nexport class IconPopoverConfig extends PopoverConfig {\n  iconConfig: IconConfig = new IconConfig();\n  disablePopover = false;\n  labels: PopoverLabel;\n}\n",
            "properties": [
                {
                    "name": "disablePopover",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "iconConfig",
                    "defaultValue": "new IconConfig()",
                    "type": "IconConfig",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "labels",
                    "type": "PopoverLabel",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "docPath",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "inheritance": {
                        "file": "PopoverConfig"
                    }
                },
                {
                    "name": "helpPath",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "inheritance": {
                        "file": "PopoverConfig"
                    }
                },
                {
                    "name": "i18nPath",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 15,
                    "inheritance": {
                        "file": "PopoverConfig"
                    }
                },
                {
                    "name": "options",
                    "type": "EdcPopoverOptions",
                    "optional": true,
                    "description": "",
                    "line": 16,
                    "inheritance": {
                        "file": "PopoverConfig"
                    }
                },
                {
                    "name": "pluginId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "inheritance": {
                        "file": "PopoverConfig"
                    }
                }
            ],
            "description": "<p>Configuration for both icon and the popover itself\nExtends the edc-popover-utils configuration.\nHolds the configuration for the edc-popover-utils, along with other properties necessary for the edc-client-ng1</p>\n<div><pre class=\"line-numbers\"><code class=\"language-none\">- iconConfig: Configuration for the icon: classes, style, url...\n- disablePopover: Defines popover current disabled state\n- labels: Translated labels from the i18n files returned by the edc help client</code></pre></div>",
            "rawdescription": "Configuration for both icon and the popover itself\nExtends the edc-popover-utils configuration.\nHolds the configuration for the edc-popover-utils, along with other properties necessary for the edc-client-ng1\n\n    - iconConfig: Configuration for the icon: classes, style, url...\n    - disablePopover: Defines popover current disabled state\n    - labels: Translated labels from the i18n files returned by the edc help client",
            "methods": [],
            "indexSignatures": [],
            "extends": "PopoverConfig",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "PopoverConfig",
            "id": "class-PopoverConfig-2831d5e85ad3a8a1c6348c63f6a51627",
            "file": "src/config/edc-configuration.ts",
            "type": "class",
            "sourceCode": "import { EdcPopoverConfiguration } from 'projects/edc-popover-ng/src/lib/config/edc-popover-configuration';\nimport { EdcPopoverOptions } from 'edc-popover-ng';\n\n/**\n * Class representing the config.json object in assets folder.\n */\nexport class EdcConfiguration {\n  popover: PopoverConfig;\n}\n\nexport class PopoverConfig implements EdcPopoverConfiguration {\n  helpPath: string;     // The URL to the help web app.\n  docPath: string;      // The URL to the HTTP served export.\n  pluginId: string;     // Export plugin name for the edc documentation.\n  i18nPath?: string;    // Path for internationalization json files in host application\n  options?: EdcPopoverOptions; // Popover options\n}\n",
            "properties": [
                {
                    "name": "docPath",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "helpPath",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "i18nPath",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "options",
                    "type": "EdcPopoverOptions",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "pluginId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "EdcPopoverConfiguration"
            ]
        },
        {
            "name": "PopoverConfigurationHandler",
            "id": "class-PopoverConfigurationHandler-43e7fd541a79ba914483ceeda3be5a7e",
            "file": "projects/edc-popover-ng/src/lib/config/popover-configuration-handler.ts",
            "type": "class",
            "sourceCode": "import { IEdcPopoverOptions } from './edc-popover-options.interface';\n\nexport abstract class PopoverConfigurationHandler {\n\n  abstract getPluginId(): string;\n\n  abstract getHelpPath(): string;\n\n  abstract getDocPath(): string;\n\n  abstract getI18nPath(): string;\n\n  abstract getPopoverOptions(): IEdcPopoverOptions;\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "getDocPath",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 9,
                    "modifierKind": [
                        117
                    ]
                },
                {
                    "name": "getHelpPath",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 7,
                    "modifierKind": [
                        117
                    ]
                },
                {
                    "name": "getI18nPath",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 11,
                    "modifierKind": [
                        117
                    ]
                },
                {
                    "name": "getPluginId",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 5,
                    "modifierKind": [
                        117
                    ]
                },
                {
                    "name": "getPopoverOptions",
                    "args": [],
                    "optional": false,
                    "returnType": "IEdcPopoverOptions",
                    "typeParameters": [],
                    "line": 13,
                    "modifierKind": [
                        117
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "PopoverIcon",
            "id": "class-PopoverIcon-5de7ac50cad936bc9af3aa24523bbe17",
            "file": "projects/edc-popover-ng/src/lib/config/popover-icon.ts",
            "type": "class",
            "sourceCode": "import { DEFAULT_ICON } from '../constants/style.constant';\n\n/**\n * Input icon properties received with the options\n *\n *    - class: the class name for the icon\n *    - url: image URL - if present, the class property will be ignored\n *    - height: url image Height in pixels, (for url images only)\n *    - width: Width in pixels: if height is not defined, height value will be applied\n *    - errorClass: Classes to use if an error occurred\n *\n */\nexport class PopoverIcon {\n  class?: string;\n  url?: string;\n  height = 18;\n  width?;\n  errorClass?: string[] = [];\n\n  /**\n   * Creates a popover icon with default values\n   */\n  static create(): PopoverIcon {\n    const icon = new PopoverIcon();\n    icon.class = DEFAULT_ICON;\n    return icon;\n  }\n}\n",
            "properties": [
                {
                    "name": "class",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "errorClass",
                    "defaultValue": "[]",
                    "type": "string[]",
                    "optional": true,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "height",
                    "defaultValue": "18",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "url",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "width",
                    "type": "",
                    "optional": true,
                    "description": "",
                    "line": 17
                }
            ],
            "description": "<p>Input icon properties received with the options</p>\n<div><pre class=\"line-numbers\"><code class=\"language-none\">- class: the class name for the icon\n- url: image URL - if present, the class property will be ignored\n- height: url image Height in pixels, (for url images only)\n- width: Width in pixels: if height is not defined, height value will be applied\n- errorClass: Classes to use if an error occurred</code></pre></div>",
            "rawdescription": "Input icon properties received with the options\n\n    - class: the class name for the icon\n    - url: image URL - if present, the class property will be ignored\n    - height: url image Height in pixels, (for url images only)\n    - width: Width in pixels: if height is not defined, height value will be applied\n    - errorClass: Classes to use if an error occurred",
            "methods": [
                {
                    "name": "create",
                    "args": [],
                    "optional": false,
                    "returnType": "PopoverIcon",
                    "typeParameters": [],
                    "line": 23,
                    "description": "<p>Creates a popover icon with default values</p>\n",
                    "modifierKind": [
                        115
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [
        {
            "name": "HelpPopoverDirective",
            "id": "directive-HelpPopoverDirective-a6fd88d499236157fbe45a6e90f97a93",
            "file": "projects/edc-popover-ng/src/lib/help-popover.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { Directive, ElementRef, Input, OnChanges, OnDestroy, SimpleChanges } from '@angular/core';\nimport { Popover } from 'edc-popover-utils';\nimport { IconPopoverConfig } from './config/icon-popover-config';\nimport { isFalse } from './utils/global.utils';\n\n@Directive({ selector: '[edcHelpPopover]' })\nexport class HelpPopoverDirective implements OnChanges, OnDestroy {\n\n  popover: Popover;\n\n  @Input() config: IconPopoverConfig;\n\n  constructor(private elementRef: ElementRef) {\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes['config']) {\n      this.loadPopover();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.removePopover();\n  }\n\n  private loadPopover(): void {\n    if (this.config && isFalse(this.config.disablePopover) && this.elementRef && this.elementRef.nativeElement) {\n      this.config.target = this.elementRef.nativeElement;\n      if (!this.popover) {\n        this.popover = new Popover();\n      }\n      this.popover.buildPopover(this.config);\n    } else {\n      this.removePopover();\n    }\n  }\n\n  private removePopover(): void {\n    // Clean any previous instance\n    if (this.popover && this.popover.instance &&\n      typeof this.popover.instance.destroy === 'function') {\n      this.popover.instance.destroy();\n    }\n  }\n}\n",
            "selector": "[edcHelpPopover]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "config",
                    "line": 11,
                    "type": "IconPopoverConfig"
                }
            ],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "popover",
                    "type": "Popover",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [
                {
                    "name": "loadPopover",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22
                },
                {
                    "name": "removePopover",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "implements": [
                "OnChanges",
                "OnDestroy"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef"
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        }
    ],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-ac3abf91b7b774783b07f1beceff9ab8",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "edc-root",
            "styleUrls": [
                "./app.component.less"
            ],
            "styles": [],
            "template": "<div class=\"main-container\">\n  <h1 class=\"title-container\">\n    Welcome to {{title}}!\n    <edc-help [mainKey]=\"'fr.techad.edc'\" [subKey]=\"'help.center'\" [lang]=\"lang\"></edc-help>\n  </h1>\n  <div class=\"lang-option\">\n    <h3>Click on the help icon to display help contents.</h3>\n    <div class=\"options-group\">\n      <div>Select the language</div>\n      <select id=\"lang\" class=\"form-group\" [(ngModel)]=\"lang\">\n        <option *ngFor=\"let language of languages\"\n                [value]=\"language\"\n                [ngClass]=\"{'translation-defined': isTranslationDefined(language)}\">\n          {{ language | uppercase }}\n        </option>\n      </select>\n      <edc-help [mainKey]=\"'fr.techad.edc'\" [subKey]=\"'help.center'\"\n                [lang]=\"lang\"></edc-help>\n    </div>\n    <div>If content for the selected language is not available in the exported documentation, it will load default</div>\n  </div>\n  <h3>Many options available!</h3>\n  <div class=\"options-group\">\n    <div class=\"error-group\">\n      <div>Icon from: URL</div>\n      <edc-help [mainKey]=\"'fr.techad.edc'\"\n                [subKey]=\"'help.center'\"\n                [lang]=\"lang\"\n                [options]=\"{ icon: { url: 'assets/images/icon.png', height: 32 }, placement: 'bottom' }\"></edc-help>\n      <div>Custom class name:</div>\n      <edc-help [mainKey]=\"'fr.techad.edc'\"\n                [subKey]=\"'help.center'\"\n                [lang]=\"lang\"\n                [options]=\"{ icon: { class: 'fa fa-book' }, placement: 'top' }\"></edc-help>\n    </div>\n  </div>\n  <div class=\"options-group dark-mode\">\n    <div>Dark mode</div>\n    <edc-help [mainKey]=\"'fr.techad.edc'\" [subKey]=\"'help.center'\"\n              [lang]=\"lang\"\n              [options]=\"{ dark: true, placement: 'top' }\"></edc-help>\n  </div>\n  <div class=\"options-group\">\n    <div>Open on hover, with some delay</div>\n    <edc-help [mainKey]=\"'fr.techad.edc'\"\n              [subKey]=\"'help.center'\"\n              [lang]=\"lang\"\n              [options]=\"{ trigger: 'mouseenter', delay: [200, 500], displayTooltip: false }\"></edc-help>\n  </div>\n  <div class=\"options-group\">\n    <div>Animations</div>\n    <select id=\"animation\" class=\"form-group\" [(ngModel)]=\"animation\">\n      <option *ngFor=\"let animation of animations\"\n              [value]=\"animation\">\n        {{ animation | uppercase }}\n      </option>\n    </select>\n    <edc-help [mainKey]=\"'fr.techad.edc'\" [subKey]=\"'help.center'\"\n              [lang]=\"lang\"\n              [options]=\"{ animation: animation, placement: 'right', trigger: 'mouseenter' }\"></edc-help>\n  </div>\n  <h3>Error state options</h3>\n  <div>Change the icon and popover appearance, content and behavior on error</div>\n  <div class=\"options-group\">\n    <div class=\"error-group\">\n      <div>Friendly message</div>\n      <edc-help [mainKey]=\"'fr.techad.edc'\" [subKey]=\"'wrong_key'\"\n                [lang]=\"lang\"\n                [options]=\"friendlyMessage\"></edc-help>\n      <div>Error message</div>\n      <edc-help [mainKey]=\"'fr.techad.edc'\" [subKey]=\"'wrong_key'\"\n                [lang]=\"lang\"\n                [options]=\"failOptionsErrorIcon\"></edc-help>\n      <div>No popover</div>\n      <edc-help [mainKey]=\"'fr.techad.edc'\" [subKey]=\"'wrong_key'\"\n                [lang]=\"lang\"\n                [options]=\"failOptionsHidden\"></edc-help>\n      <div>Hidden icon</div>\n      <edc-help [mainKey]=\"'fr.techad.edc'\" [subKey]=\"'wrong_key'\"\n                [lang]=\"lang\"\n                [options]=\"{ failBehavior: {  icon: iconBehavior.HIDDEN, popover: popoverBehavior.ERROR_SHOWN} }\"></edc-help>\n    </div>\n  </div>\n  <h3>More options at <a href=\"https://github.com/tech-advantage/edc-popover-ng\">edc-popover-ng</a></h3>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "animation",
                    "defaultValue": "AnimationType.SHIFT_AWAY_EXTREME",
                    "type": "Animation",
                    "optional": false,
                    "description": "",
                    "line": 110
                },
                {
                    "name": "animations",
                    "defaultValue": "Object.values(AnimationType)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 111
                },
                {
                    "name": "failOptions2",
                    "defaultValue": "{\n    placement: PopoverPlacement.BOTTOM_START,\n    customClass: 'my-popover',\n    dark: true,\n    failBehavior: {\n      icon: IconBehavior.SHOWN,\n      popover: PopoverBehavior.FRIENDLY_MSG\n    }\n  }",
                    "type": "IEdcPopoverOptions",
                    "optional": false,
                    "description": "",
                    "line": 125
                },
                {
                    "name": "failOptionsErrorIcon",
                    "defaultValue": "{\n    placement: PopoverPlacement.BOTTOM_START,\n    customClass: 'my-popover',\n    dark: true,\n    failBehavior: {\n      icon: IconBehavior.ERROR,\n      popover: PopoverBehavior.ERROR_SHOWN\n    }\n  }",
                    "type": "IEdcPopoverOptions",
                    "optional": false,
                    "description": "",
                    "line": 135
                },
                {
                    "name": "failOptionsHidden",
                    "defaultValue": "{\n    placement: PopoverPlacement.BOTTOM_START,\n    failBehavior: {\n      icon: IconBehavior.SHOWN,\n      popover: PopoverBehavior.NO_POPOVER\n    }\n  }",
                    "type": "IEdcPopoverOptions",
                    "optional": false,
                    "description": "",
                    "line": 145
                },
                {
                    "name": "friendlyMessage",
                    "defaultValue": "{\n    placement: PopoverPlacement.BOTTOM_START,\n    customClass: 'my-popover',\n    failBehavior: {\n      icon: IconBehavior.SHOWN,\n      popover: PopoverBehavior.ERROR_SHOWN\n    },\n    animation: AnimationType.SHIFT_AWAY_EXTREME\n  }",
                    "type": "IEdcPopoverOptions",
                    "optional": false,
                    "description": "",
                    "line": 115
                },
                {
                    "name": "iconBehavior",
                    "defaultValue": "IconBehavior",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 112
                },
                {
                    "name": "lang",
                    "defaultValue": "'en'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 107
                },
                {
                    "name": "languages",
                    "defaultValue": "LANGUAGE_CODES",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 109
                },
                {
                    "name": "popoverBehavior",
                    "defaultValue": "PopoverBehavior",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 113
                },
                {
                    "name": "title",
                    "defaultValue": "'edc-popover-ng demo'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 106
                }
            ],
            "methodsClass": [
                {
                    "name": "isTranslationDefined",
                    "args": [
                        {
                            "name": "language",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 153,
                    "jsdoctags": [
                        {
                            "name": "language",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport {\n  Animation,\n  AnimationType,\n  DEFINED_TRANSLATION_CODES,\n  IconBehavior,\n  IEdcPopoverOptions,\n  LANGUAGE_CODES,\n  PopoverBehavior\n} from 'edc-popover-ng';\nimport { PopoverPlacement } from 'edc-popover-utils';\n\n@Component({\n  selector: 'edc-root',\n  template: `\n    <div class=\"main-container\">\n      <h1 class=\"title-container\">\n        Welcome to {{title}}!\n        <edc-help [mainKey]=\"'fr.techad.edc'\" [subKey]=\"'help.center'\" [lang]=\"lang\"></edc-help>\n      </h1>\n      <div class=\"lang-option\">\n        <h3>Click on the help icon to display help contents.</h3>\n        <div class=\"options-group\">\n          <div>Select the language</div>\n          <select id=\"lang\" class=\"form-group\" [(ngModel)]=\"lang\">\n            <option *ngFor=\"let language of languages\"\n                    [value]=\"language\"\n                    [ngClass]=\"{'translation-defined': isTranslationDefined(language)}\">\n              {{ language | uppercase }}\n            </option>\n          </select>\n          <edc-help [mainKey]=\"'fr.techad.edc'\" [subKey]=\"'help.center'\"\n                    [lang]=\"lang\"></edc-help>\n        </div>\n        <div>If content for the selected language is not available in the exported documentation, it will load default</div>\n      </div>\n      <h3>Many options available!</h3>\n      <div class=\"options-group\">\n        <div class=\"error-group\">\n          <div>Icon from: URL</div>\n          <edc-help [mainKey]=\"'fr.techad.edc'\"\n                    [subKey]=\"'help.center'\"\n                    [lang]=\"lang\"\n                    [options]=\"{ icon: { url: 'assets/images/icon.png', height: 32 }, placement: 'bottom' }\"></edc-help>\n          <div>Custom class name:</div>\n          <edc-help [mainKey]=\"'fr.techad.edc'\"\n                    [subKey]=\"'help.center'\"\n                    [lang]=\"lang\"\n                    [options]=\"{ icon: { class: 'fa fa-book' }, placement: 'top' }\"></edc-help>\n        </div>\n      </div>\n      <div class=\"options-group dark-mode\">\n        <div>Dark mode</div>\n        <edc-help [mainKey]=\"'fr.techad.edc'\" [subKey]=\"'help.center'\"\n                  [lang]=\"lang\"\n                  [options]=\"{ dark: true, placement: 'top' }\"></edc-help>\n      </div>\n      <div class=\"options-group\">\n        <div>Open on hover, with some delay</div>\n        <edc-help [mainKey]=\"'fr.techad.edc'\"\n                  [subKey]=\"'help.center'\"\n                  [lang]=\"lang\"\n                  [options]=\"{ trigger: 'mouseenter', delay: [200, 500], displayTooltip: false }\"></edc-help>\n      </div>\n      <div class=\"options-group\">\n        <div>Animations</div>\n        <select id=\"animation\" class=\"form-group\" [(ngModel)]=\"animation\">\n          <option *ngFor=\"let animation of animations\"\n                  [value]=\"animation\">\n            {{ animation | uppercase }}\n          </option>\n        </select>\n        <edc-help [mainKey]=\"'fr.techad.edc'\" [subKey]=\"'help.center'\"\n                  [lang]=\"lang\"\n                  [options]=\"{ animation: animation, placement: 'right', trigger: 'mouseenter' }\"></edc-help>\n      </div>\n      <h3>Error state options</h3>\n      <div>Change the icon and popover appearance, content and behavior on error</div>\n      <div class=\"options-group\">\n        <div class=\"error-group\">\n          <div>Friendly message</div>\n          <edc-help [mainKey]=\"'fr.techad.edc'\" [subKey]=\"'wrong_key'\"\n                    [lang]=\"lang\"\n                    [options]=\"friendlyMessage\"></edc-help>\n          <div>Error message</div>\n          <edc-help [mainKey]=\"'fr.techad.edc'\" [subKey]=\"'wrong_key'\"\n                    [lang]=\"lang\"\n                    [options]=\"failOptionsErrorIcon\"></edc-help>\n          <div>No popover</div>\n          <edc-help [mainKey]=\"'fr.techad.edc'\" [subKey]=\"'wrong_key'\"\n                    [lang]=\"lang\"\n                    [options]=\"failOptionsHidden\"></edc-help>\n          <div>Hidden icon</div>\n          <edc-help [mainKey]=\"'fr.techad.edc'\" [subKey]=\"'wrong_key'\"\n                    [lang]=\"lang\"\n                    [options]=\"{ failBehavior: {  icon: iconBehavior.HIDDEN, popover: popoverBehavior.ERROR_SHOWN} }\"></edc-help>\n        </div>\n      </div>\n      <h3>More options at <a href=\"https://github.com/tech-advantage/edc-popover-ng\">edc-popover-ng</a></h3>\n    </div>\n  `,\n  styleUrls: ['./app.component.less']\n})\nexport class AppComponent {\n\n  title = 'edc-popover-ng demo';\n  lang = 'en';\n\n  languages = LANGUAGE_CODES;\n  animation: Animation = AnimationType.SHIFT_AWAY_EXTREME;\n  animations = Object.values(AnimationType);\n  iconBehavior = IconBehavior;\n  popoverBehavior = PopoverBehavior;\n\n  friendlyMessage: IEdcPopoverOptions = {\n    placement: PopoverPlacement.BOTTOM_START,\n    customClass: 'my-popover',\n    failBehavior: {\n      icon: IconBehavior.SHOWN,\n      popover: PopoverBehavior.ERROR_SHOWN\n    },\n    animation: AnimationType.SHIFT_AWAY_EXTREME\n  };\n\n  failOptions2: IEdcPopoverOptions = {\n    placement: PopoverPlacement.BOTTOM_START,\n    customClass: 'my-popover',\n    dark: true,\n    failBehavior: {\n      icon: IconBehavior.SHOWN,\n      popover: PopoverBehavior.FRIENDLY_MSG\n    }\n  };\n\n  failOptionsErrorIcon: IEdcPopoverOptions = {\n    placement: PopoverPlacement.BOTTOM_START,\n    customClass: 'my-popover',\n    dark: true,\n    failBehavior: {\n      icon: IconBehavior.ERROR,\n      popover: PopoverBehavior.ERROR_SHOWN\n    }\n  };\n\n  failOptionsHidden: IEdcPopoverOptions = {\n    placement: PopoverPlacement.BOTTOM_START,\n    failBehavior: {\n      icon: IconBehavior.SHOWN,\n      popover: PopoverBehavior.NO_POPOVER\n    }\n  };\n\n  isTranslationDefined(language: string): boolean {\n    return DEFINED_TRANSLATION_CODES.indexOf(language) > -1;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@font-face {\n  font-family: 'Montserrat';\n  src: url(https://fonts.googleapis.com/css?family=Ubuntu) format('truetype');\n  font-weight:300;\n}\n\n:host {\n  font-family: 'Montserrat', sans-serif;\n  .main-container {\n    min-width: 580px;\n    padding: 20px 25%;\n    select {\n      margin-left: 10px;\n      width: 250px;\n    }\n\n    .lang-option select {\n      width: 80px;\n    }\n    .translation-defined {\n      background-color: lightgreen;\n    }\n  }\n  .edc-help-icon {\n    padding-left: 5px;\n    vertical-align: text-top;\n  }\n  .options-group {\n    padding: 5px 10px;\n    display: flex;\n    align-content: center;\n    line-height: 34px;\n\n    edc-help {\n      padding-left: 8px;\n    }\n  }\n\n  .dark-mode {\n    color: #EEE;\n    background-color: #999;\n    width: 200px;\n    margin-left: 10px;\n  }\n\n  .error-group {\n    display: flex;\n    justify-content: space-between;\n    edc-help {\n      padding-right: 20px;\n    }\n  }\n\n}\n",
                    "styleUrl": "./app.component.less"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "HelpComponent",
            "id": "component-HelpComponent-33064e194832381d1092849176544bd2",
            "file": "projects/edc-popover-ng/src/lib/help.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "edc-help",
            "styleUrls": [
                "./help.less",
                "../style.less"
            ],
            "styles": [],
            "template": "<span\n  class=\"edc-help-icon\"\n  [ngClass]=\"getIconClasses()\"\n  [ngStyle]=\"getIconStyle()\"\n  edcHelpPopover [config]=\"config\"></span>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "lang",
                    "line": 27,
                    "type": "string"
                },
                {
                    "name": "mainKey",
                    "line": 25,
                    "type": "string"
                },
                {
                    "name": "options",
                    "line": 28,
                    "type": "IEdcPopoverOptions"
                },
                {
                    "name": "pluginId",
                    "line": 24,
                    "type": "string"
                },
                {
                    "name": "subKey",
                    "line": 26,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "config",
                    "type": "IconPopoverConfig",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "popover",
                    "type": "Popover",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methodsClass": [
                {
                    "name": "buildPopoverConfig",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "getIconClasses",
                    "args": [],
                    "optional": false,
                    "returnType": "string | []",
                    "typeParameters": [],
                    "line": 37
                },
                {
                    "name": "getIconStyle",
                    "args": [],
                    "optional": false,
                    "returnType": "Partial<CSSStyleDeclaration>",
                    "typeParameters": [],
                    "line": 41
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, OnChanges, SimpleChanges, ViewEncapsulation } from '@angular/core';\nimport { HelpConfigService } from './services/help-config.service';\nimport { IEdcPopoverOptions } from './config/edc-popover-options.interface';\nimport { IconPopoverConfig } from './config/icon-popover-config';\nimport { Popover } from 'edc-popover-utils';\n\n@Component({\n  selector: 'edc-help',\n  styleUrls: ['./help.less', '../style.less'],\n  template: `\n    <span\n      class=\"edc-help-icon\"\n      [ngClass]=\"getIconClasses()\"\n      [ngStyle]=\"getIconStyle()\"\n      edcHelpPopover [config]=\"config\"></span>\n  `,\n  encapsulation: ViewEncapsulation.None\n})\nexport class HelpComponent implements OnChanges {\n\n  config: IconPopoverConfig;\n  popover: Popover;\n\n  @Input() pluginId: string;\n  @Input() mainKey: string;\n  @Input() subKey: string;\n  @Input() lang: string;\n  @Input() options: IEdcPopoverOptions;\n\n  constructor(private readonly helpConfigService: HelpConfigService) {\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.buildPopoverConfig();\n  }\n\n  getIconClasses(): string | string[] {\n    return this.helpConfigService.getIconClasses(this.config);\n  }\n\n  getIconStyle(): Partial<CSSStyleDeclaration> {\n    return this.config && this.config.iconConfig && this.config.iconConfig.imageStyle;\n  }\n\n  private buildPopoverConfig(): void {\n    this.helpConfigService.buildPopoverConfig(this.mainKey, this.subKey, this.pluginId, this.lang, this.options)\n      .then((config: IconPopoverConfig) => this.config = config);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@icon-idle-color: lightgray;\n@icon-hover-color: rgb(60, 141, 188);\n@on-dark-color: rgba(0, 0, 0, .3);\n@on-dark-hover-color: white;\n@icon-disabled-color: rgb(211, 211, 211);\n@icon-error-color: rgb(210, 30, 30);\n\n@icon-disabled-opacity: 0.6;\n\nedc-help {\n  line-height: 34px;\n  font-size: 16px;\n  padding-right: 5px;\n\n  .edc-help-icon {\n    cursor: pointer;\n    color: @icon-idle-color;\n    &.icon-image {\n      display: inline-block;\n    }\n    &:hover {\n      color: @icon-hover-color;\n    }\n\n    &.edc-on-dark {\n      color: @on-dark-color;\n\n      &:hover {\n        color: @on-dark-hover-color;\n      }\n    }\n    &.edc-icon-hidden {\n      visibility: hidden;\n    }\n    &.edc-icon-disabled {\n      color: @icon-disabled-color;\n      opacity: @icon-disabled-opacity;\n    }\n    &.edc-icon-error {\n      color: @icon-error-color;\n    }\n  }\n}\n",
                    "styleUrl": "./help.less"
                },
                {
                    "data": "/* Import style from edc-popover-utils  */\n@import (inline) '../node_modules/edc-popover-utils/dist/edc-popover.css';\n",
                    "styleUrl": "../style.less"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "helpConfigService",
                        "type": "HelpConfigService"
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "helpConfigService",
                        "type": "HelpConfigService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnChanges"
            ]
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "ConfigService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "HelpModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "HelpModule",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "EdcTranslationService"
                        },
                        {
                            "name": "HelpConfigService"
                        },
                        {
                            "name": "HelpErrorService"
                        },
                        {
                            "name": "HelpIconService"
                        },
                        {
                            "name": "HelpPopoverService"
                        },
                        {
                            "name": "HelpService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "HelpComponent"
                        },
                        {
                            "name": "HelpPopoverDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "HelpComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TestModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FakeTranslatePipe"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FakeTranslatePipe"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/edc-popover-ng/src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "copyDefinedProperties",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/edc-popover-ng/src/lib/utils/global.utils.ts",
                "type": "",
                "defaultValue": "<T>(target: T, src: T): T => {\n  if (!isObject(target)) {\n    return null;\n  }\n  // Create a shallow copy of the target\n  const newTarget = Object.assign({}, target);\n  if (!isObject(src)) {\n    return newTarget;\n  }\n  // Copying the defined ones into the new target object\n  return Object.keys(src)\n    .reduce<T>((memo: T, key: string) => {\n      // Copy values from src into target only if they are defined\n      if (src.hasOwnProperty(key) && !isNil(src[key])) {\n        memo[key] = src[key];\n      }\n      return memo;\n    }, newTarget);\n}",
                "description": "<p>Copies the defined source properties into the given object,\nskipping any null or undefined values in the source object.</p>\n<p>Does not modify target, create a new shallow copy of the target\nIf source is null or a primitive, returns a shallow copy of target\nIf target is null or a primitive, returns null even if source is defined</p>\n"
            },
            {
                "name": "DARK_CLASS_NAME",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/edc-popover-ng/src/lib/constants/style.constant.ts",
                "type": "string",
                "defaultValue": "'edc-on-dark'"
            },
            {
                "name": "DEFAULT_ICON",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/edc-popover-ng/src/lib/constants/style.constant.ts",
                "type": "",
                "defaultValue": "`${FONT_AWESOME_4_ICON} ${FONT_AWESOME_5_ICON}`"
            },
            {
                "name": "DEFAULT_LABELS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/edc-popover-ng/src/lib/translate/default-translations.ts",
                "type": "",
                "defaultValue": "new Map<string, PopoverLabel>()\n  .set('en', LABELS_EN)\n  .set('fr', LABELS_FR)"
            },
            {
                "name": "DEFINED_TRANSLATION_CODES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/edc-popover-ng/src/lib/translate/language-codes.ts",
                "type": "[]",
                "defaultValue": "[\n  'en',\n  'fr'\n]"
            },
            {
                "name": "EdcHelpMain",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/edc-help.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "type": "object",
                "defaultValue": "{\n  production: true\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "type": "object",
                "defaultValue": "{\n  production: false,\n  configFile: 'assets/config.json'\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/edc-popover-ng/src/lib/environments/environment.prod.ts",
                "type": "object",
                "defaultValue": "{\n  production: true\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/edc-popover-ng/src/lib/environments/environment.ts",
                "type": "object",
                "defaultValue": "{\n  production: false\n}"
            },
            {
                "name": "ERROR_ICON",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/edc-popover-ng/src/lib/constants/style.constant.ts",
                "type": "string",
                "defaultValue": "'fa fa-exclamation-circle'"
            },
            {
                "name": "FONT_AWESOME_4_ICON",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/edc-popover-ng/src/lib/constants/style.constant.ts",
                "type": "string",
                "defaultValue": "'fa fa-question-circle-o'"
            },
            {
                "name": "FONT_AWESOME_5_ICON",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/edc-popover-ng/src/lib/constants/style.constant.ts",
                "type": "string",
                "defaultValue": "'fas fa-question-circle'"
            },
            {
                "name": "IMAGE_BACKGROUND_SIZE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/edc-popover-ng/src/lib/constants/style.constant.ts",
                "type": "string",
                "defaultValue": "'100% 100%'"
            },
            {
                "name": "IMAGE_CLASS_NAME",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/edc-popover-ng/src/lib/constants/style.constant.ts",
                "type": "string",
                "defaultValue": "'icon-image'"
            },
            {
                "name": "IMAGE_HEIGHT",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/edc-popover-ng/src/lib/constants/style.constant.ts",
                "type": "number",
                "defaultValue": "18"
            },
            {
                "name": "IMAGE_WIDTH",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/edc-popover-ng/src/lib/constants/style.constant.ts",
                "type": "number",
                "defaultValue": "18"
            },
            {
                "name": "isFalse",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/edc-popover-ng/src/lib/utils/global.utils.ts",
                "type": "",
                "defaultValue": "(value: boolean): boolean => !isNil(value) && !value",
                "description": "<p>Check if value is defined and false</p>\n"
            },
            {
                "name": "isNil",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/edc-popover-ng/src/lib/utils/global.utils.ts",
                "type": "",
                "defaultValue": "value => value === undefined || value === null",
                "description": "<p>Returns true if a value is null or undefined</p>\n<p>Obs: worth remembering that null is of type &#39;object&#39; while undefined is of type &#39;undefined&#39;\nAnd null is only loosely equal to itself and undefined, not to the other falsy values</p>\n"
            },
            {
                "name": "isObject",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/edc-popover-ng/src/lib/utils/global.utils.ts",
                "type": "",
                "defaultValue": "(obj: any): boolean => typeof obj === 'object' && obj !== null",
                "description": "<p>Returns true if value is an object not null</p>\n"
            },
            {
                "name": "LABELS_EN",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/edc-popover-ng/src/lib/translate/default-translations.ts",
                "type": "PopoverLabel",
                "defaultValue": "{\n  articles: 'Need more...',\n  links: 'Related topics',\n  iconAlt: 'Help',\n  comingSoon: 'Contextual help is coming soon.',\n  errorTitle:  'Error',\n  errors: {\n    failedData: 'An error occurred when fetching data !\\nCheck the brick keys provided to the EdcHelp component.'\n  },\n  content: null,\n  url: '',\n  exportId: ''\n}"
            },
            {
                "name": "LABELS_FR",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/edc-popover-ng/src/lib/translate/default-translations.ts",
                "type": "PopoverLabel",
                "defaultValue": "{\n  articles: 'Plus d\\'info...',\n  links: 'Sujets associés',\n  iconAlt: 'Aide',\n  comingSoon: 'Aide contextuelle à venir.',\n  errorTitle:  'Erreur',\n  errors: {\n    failedData: 'Une erreur est survenue lors de la récupération des données !' +\n      '\\nVérifiez les clés de la brique fournies au composant EdcHelp.'\n  },\n  content: null,\n  url: '',\n  exportId: ''\n}"
            },
            {
                "name": "LANGUAGE_CODES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/edc-popover-ng/src/lib/translate/language-codes.ts",
                "type": "[]",
                "defaultValue": "[\n  'en', // English\n  'ar', // Arabic\n  'bg', // Bulgarian\n  'zh', // Chinese\n  'hr', // Croatian\n  'cs', // Czech\n  'da', // Danish\n  'nl', // Dutch\n  'et', // Estonian\n  'fi', // Finnish\n  'fr', // French\n  'de', // German\n  'el', // Greek\n  'he', // Hebrew\n  'hu', // Hungarian\n  'is', // Icelandic\n  'ga', // Irish\n  'it', // Italian\n  'ja', // Japanese\n  'ko', // Korean\n  'lv', // Latvian\n  'lt', // Lithuanian\n  'lb', // Luxembourgish\n  'mt', // Maltese\n  'no', // Norwegian\n  'fa', // Persian\n  'pl', // Polish\n  'pt', // Portuguese\n  'ro', // Romanian\n  'ru', // Russian\n  'sk', // Slovak\n  'sl', // Slovenian\n  'es', // Spanish\n  'sv', // Swedish\n  'tr', // Turkish\n  'vi', // Vietnamese\n]"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "any"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/edc-popover-ng/src/test.ts",
                "type": "any"
            },
            {
                "name": "SYS_LANG",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/edc-popover-ng/src/lib/translate/language-codes.ts",
                "type": "string",
                "defaultValue": "'en'"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/edc-help.stories.ts",
                "type": "Story<HelpComponent>",
                "defaultValue": "(args: HelpComponent) => ({\n  component: HelpComponent,\n  props: args,\n})"
            }
        ],
        "functions": [
            {
                "name": "ConfigLoader",
                "file": "src/app/app.module.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "configService"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "configService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "mock",
                "file": "projects/edc-popover-ng/src/lib/utils/test-helpers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "type"
                    },
                    {
                        "name": "object",
                        "type": "any"
                    }
                ],
                "returnType": "T",
                "jsdoctags": [
                    {
                        "name": "type",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "object",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "mockHelper",
                "file": "projects/edc-popover-ng/src/lib/utils/test-helpers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "<p>Mock a documentation helper</p>\n",
                "args": [],
                "returnType": "Helper"
            },
            {
                "name": "mockService",
                "file": "projects/edc-popover-ng/src/lib/utils/test-helpers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "provide",
                        "type": "any"
                    },
                    {
                        "name": "methods"
                    }
                ],
                "returnType": "Provider",
                "jsdoctags": [
                    {
                        "name": "provide",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "methods",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [],
        "enumerations": [
            {
                "name": "IconBehavior",
                "childs": [
                    {
                        "name": "SHOWN",
                        "value": "shown"
                    },
                    {
                        "name": "DISABLED",
                        "value": "disabled"
                    },
                    {
                        "name": "HIDDEN",
                        "value": "hidden"
                    },
                    {
                        "name": "ERROR",
                        "value": "error"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "projects/edc-popover-ng/src/lib/config/fail-behavior.ts"
            },
            {
                "name": "IconClass",
                "childs": [
                    {
                        "name": "NONE",
                        "value": ""
                    },
                    {
                        "name": "DISABLED",
                        "value": "edc-icon-disabled"
                    },
                    {
                        "name": "HIDDEN",
                        "value": "edc-icon-hidden"
                    },
                    {
                        "name": "ERROR",
                        "value": "edc-icon-error"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "projects/edc-popover-ng/src/lib/constants/style.constant.ts"
            },
            {
                "name": "PopoverBehavior",
                "childs": [
                    {
                        "name": "FRIENDLY_MSG",
                        "value": "friendlyMsg"
                    },
                    {
                        "name": "ERROR_SHOWN",
                        "value": "errorShown"
                    },
                    {
                        "name": "NO_POPOVER",
                        "value": "noPopover"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "projects/edc-popover-ng/src/lib/config/fail-behavior.ts"
            }
        ],
        "groupedVariables": {
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "any"
                }
            ],
            "projects/edc-popover-ng/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/edc-popover-ng/src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/edc-popover-ng/src/test.ts",
                    "type": "any"
                }
            ],
            "projects/edc-popover-ng/src/lib/utils/global.utils.ts": [
                {
                    "name": "copyDefinedProperties",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/edc-popover-ng/src/lib/utils/global.utils.ts",
                    "type": "",
                    "defaultValue": "<T>(target: T, src: T): T => {\n  if (!isObject(target)) {\n    return null;\n  }\n  // Create a shallow copy of the target\n  const newTarget = Object.assign({}, target);\n  if (!isObject(src)) {\n    return newTarget;\n  }\n  // Copying the defined ones into the new target object\n  return Object.keys(src)\n    .reduce<T>((memo: T, key: string) => {\n      // Copy values from src into target only if they are defined\n      if (src.hasOwnProperty(key) && !isNil(src[key])) {\n        memo[key] = src[key];\n      }\n      return memo;\n    }, newTarget);\n}",
                    "description": "<p>Copies the defined source properties into the given object,\nskipping any null or undefined values in the source object.</p>\n<p>Does not modify target, create a new shallow copy of the target\nIf source is null or a primitive, returns a shallow copy of target\nIf target is null or a primitive, returns null even if source is defined</p>\n"
                },
                {
                    "name": "isFalse",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/edc-popover-ng/src/lib/utils/global.utils.ts",
                    "type": "",
                    "defaultValue": "(value: boolean): boolean => !isNil(value) && !value",
                    "description": "<p>Check if value is defined and false</p>\n"
                },
                {
                    "name": "isNil",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/edc-popover-ng/src/lib/utils/global.utils.ts",
                    "type": "",
                    "defaultValue": "value => value === undefined || value === null",
                    "description": "<p>Returns true if a value is null or undefined</p>\n<p>Obs: worth remembering that null is of type &#39;object&#39; while undefined is of type &#39;undefined&#39;\nAnd null is only loosely equal to itself and undefined, not to the other falsy values</p>\n"
                },
                {
                    "name": "isObject",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/edc-popover-ng/src/lib/utils/global.utils.ts",
                    "type": "",
                    "defaultValue": "(obj: any): boolean => typeof obj === 'object' && obj !== null",
                    "description": "<p>Returns true if value is an object not null</p>\n"
                }
            ],
            "projects/edc-popover-ng/src/lib/constants/style.constant.ts": [
                {
                    "name": "DARK_CLASS_NAME",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/edc-popover-ng/src/lib/constants/style.constant.ts",
                    "type": "string",
                    "defaultValue": "'edc-on-dark'"
                },
                {
                    "name": "DEFAULT_ICON",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/edc-popover-ng/src/lib/constants/style.constant.ts",
                    "type": "",
                    "defaultValue": "`${FONT_AWESOME_4_ICON} ${FONT_AWESOME_5_ICON}`"
                },
                {
                    "name": "ERROR_ICON",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/edc-popover-ng/src/lib/constants/style.constant.ts",
                    "type": "string",
                    "defaultValue": "'fa fa-exclamation-circle'"
                },
                {
                    "name": "FONT_AWESOME_4_ICON",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/edc-popover-ng/src/lib/constants/style.constant.ts",
                    "type": "string",
                    "defaultValue": "'fa fa-question-circle-o'"
                },
                {
                    "name": "FONT_AWESOME_5_ICON",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/edc-popover-ng/src/lib/constants/style.constant.ts",
                    "type": "string",
                    "defaultValue": "'fas fa-question-circle'"
                },
                {
                    "name": "IMAGE_BACKGROUND_SIZE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/edc-popover-ng/src/lib/constants/style.constant.ts",
                    "type": "string",
                    "defaultValue": "'100% 100%'"
                },
                {
                    "name": "IMAGE_CLASS_NAME",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/edc-popover-ng/src/lib/constants/style.constant.ts",
                    "type": "string",
                    "defaultValue": "'icon-image'"
                },
                {
                    "name": "IMAGE_HEIGHT",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/edc-popover-ng/src/lib/constants/style.constant.ts",
                    "type": "number",
                    "defaultValue": "18"
                },
                {
                    "name": "IMAGE_WIDTH",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/edc-popover-ng/src/lib/constants/style.constant.ts",
                    "type": "number",
                    "defaultValue": "18"
                }
            ],
            "projects/edc-popover-ng/src/lib/translate/default-translations.ts": [
                {
                    "name": "DEFAULT_LABELS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/edc-popover-ng/src/lib/translate/default-translations.ts",
                    "type": "",
                    "defaultValue": "new Map<string, PopoverLabel>()\n  .set('en', LABELS_EN)\n  .set('fr', LABELS_FR)"
                },
                {
                    "name": "LABELS_EN",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/edc-popover-ng/src/lib/translate/default-translations.ts",
                    "type": "PopoverLabel",
                    "defaultValue": "{\n  articles: 'Need more...',\n  links: 'Related topics',\n  iconAlt: 'Help',\n  comingSoon: 'Contextual help is coming soon.',\n  errorTitle:  'Error',\n  errors: {\n    failedData: 'An error occurred when fetching data !\\nCheck the brick keys provided to the EdcHelp component.'\n  },\n  content: null,\n  url: '',\n  exportId: ''\n}"
                },
                {
                    "name": "LABELS_FR",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/edc-popover-ng/src/lib/translate/default-translations.ts",
                    "type": "PopoverLabel",
                    "defaultValue": "{\n  articles: 'Plus d\\'info...',\n  links: 'Sujets associés',\n  iconAlt: 'Aide',\n  comingSoon: 'Aide contextuelle à venir.',\n  errorTitle:  'Erreur',\n  errors: {\n    failedData: 'Une erreur est survenue lors de la récupération des données !' +\n      '\\nVérifiez les clés de la brique fournies au composant EdcHelp.'\n  },\n  content: null,\n  url: '',\n  exportId: ''\n}"
                }
            ],
            "projects/edc-popover-ng/src/lib/translate/language-codes.ts": [
                {
                    "name": "DEFINED_TRANSLATION_CODES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/edc-popover-ng/src/lib/translate/language-codes.ts",
                    "type": "[]",
                    "defaultValue": "[\n  'en',\n  'fr'\n]"
                },
                {
                    "name": "LANGUAGE_CODES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/edc-popover-ng/src/lib/translate/language-codes.ts",
                    "type": "[]",
                    "defaultValue": "[\n  'en', // English\n  'ar', // Arabic\n  'bg', // Bulgarian\n  'zh', // Chinese\n  'hr', // Croatian\n  'cs', // Czech\n  'da', // Danish\n  'nl', // Dutch\n  'et', // Estonian\n  'fi', // Finnish\n  'fr', // French\n  'de', // German\n  'el', // Greek\n  'he', // Hebrew\n  'hu', // Hungarian\n  'is', // Icelandic\n  'ga', // Irish\n  'it', // Italian\n  'ja', // Japanese\n  'ko', // Korean\n  'lv', // Latvian\n  'lt', // Lithuanian\n  'lb', // Luxembourgish\n  'mt', // Maltese\n  'no', // Norwegian\n  'fa', // Persian\n  'pl', // Polish\n  'pt', // Portuguese\n  'ro', // Romanian\n  'ru', // Russian\n  'sk', // Slovak\n  'sl', // Slovenian\n  'es', // Spanish\n  'sv', // Swedish\n  'tr', // Turkish\n  'vi', // Vietnamese\n]"
                },
                {
                    "name": "SYS_LANG",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/edc-popover-ng/src/lib/translate/language-codes.ts",
                    "type": "string",
                    "defaultValue": "'en'"
                }
            ],
            "src/stories/edc-help.stories.ts": [
                {
                    "name": "EdcHelpMain",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/edc-help.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/edc-help.stories.ts",
                    "type": "Story<HelpComponent>",
                    "defaultValue": "(args: HelpComponent) => ({\n  component: HelpComponent,\n  props: args,\n})"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: true\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: false,\n  configFile: 'assets/config.json'\n}"
                }
            ],
            "projects/edc-popover-ng/src/lib/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/edc-popover-ng/src/lib/environments/environment.prod.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: true\n}"
                }
            ],
            "projects/edc-popover-ng/src/lib/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/edc-popover-ng/src/lib/environments/environment.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: false\n}"
                }
            ]
        },
        "groupedFunctions": {
            "src/app/app.module.ts": [
                {
                    "name": "ConfigLoader",
                    "file": "src/app/app.module.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "configService"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "configService",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/edc-popover-ng/src/lib/utils/test-helpers.ts": [
                {
                    "name": "mock",
                    "file": "projects/edc-popover-ng/src/lib/utils/test-helpers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "type"
                        },
                        {
                            "name": "object",
                            "type": "any"
                        }
                    ],
                    "returnType": "T",
                    "jsdoctags": [
                        {
                            "name": "type",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "object",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "mockHelper",
                    "file": "projects/edc-popover-ng/src/lib/utils/test-helpers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "<p>Mock a documentation helper</p>\n",
                    "args": [],
                    "returnType": "Helper"
                },
                {
                    "name": "mockService",
                    "file": "projects/edc-popover-ng/src/lib/utils/test-helpers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "provide",
                            "type": "any"
                        },
                        {
                            "name": "methods"
                        }
                    ],
                    "returnType": "Provider",
                    "jsdoctags": [
                        {
                            "name": "provide",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "methods",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {
            "projects/edc-popover-ng/src/lib/config/fail-behavior.ts": [
                {
                    "name": "IconBehavior",
                    "childs": [
                        {
                            "name": "SHOWN",
                            "value": "shown"
                        },
                        {
                            "name": "DISABLED",
                            "value": "disabled"
                        },
                        {
                            "name": "HIDDEN",
                            "value": "hidden"
                        },
                        {
                            "name": "ERROR",
                            "value": "error"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "projects/edc-popover-ng/src/lib/config/fail-behavior.ts"
                },
                {
                    "name": "PopoverBehavior",
                    "childs": [
                        {
                            "name": "FRIENDLY_MSG",
                            "value": "friendlyMsg"
                        },
                        {
                            "name": "ERROR_SHOWN",
                            "value": "errorShown"
                        },
                        {
                            "name": "NO_POPOVER",
                            "value": "noPopover"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "projects/edc-popover-ng/src/lib/config/fail-behavior.ts"
                }
            ],
            "projects/edc-popover-ng/src/lib/constants/style.constant.ts": [
                {
                    "name": "IconClass",
                    "childs": [
                        {
                            "name": "NONE",
                            "value": ""
                        },
                        {
                            "name": "DISABLED",
                            "value": "edc-icon-disabled"
                        },
                        {
                            "name": "HIDDEN",
                            "value": "edc-icon-hidden"
                        },
                        {
                            "name": "ERROR",
                            "value": "edc-icon-error"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "projects/edc-popover-ng/src/lib/constants/style.constant.ts"
                }
            ]
        },
        "groupedTypeAliases": {}
    },
    "routes": [],
    "coverage": {
        "count": 16,
        "status": "low",
        "files": [
            {
                "filePath": "e2e/src/app.po.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/edc-popover-ng/src/lib/config/edc-popover-configuration.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "EdcPopoverConfiguration",
                "coveragePercent": 16,
                "coverageCount": "1/6",
                "status": "low"
            },
            {
                "filePath": "projects/edc-popover-ng/src/lib/config/edc-popover-options.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IEdcPopoverOptions",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/edc-popover-ng/src/lib/config/edc-popover-options.ts",
                "type": "class",
                "linktype": "classe",
                "name": "EdcPopoverOptions",
                "coveragePercent": 25,
                "coverageCount": "1/4",
                "status": "low"
            },
            {
                "filePath": "projects/edc-popover-ng/src/lib/config/fail-behavior.ts",
                "type": "class",
                "linktype": "classe",
                "name": "FailBehavior",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/edc-popover-ng/src/lib/config/icon-config.ts",
                "type": "class",
                "linktype": "classe",
                "name": "IconConfig",
                "coveragePercent": 14,
                "coverageCount": "1/7",
                "status": "low"
            },
            {
                "filePath": "projects/edc-popover-ng/src/lib/config/icon-popover-config.ts",
                "type": "class",
                "linktype": "classe",
                "name": "IconPopoverConfig",
                "coveragePercent": 11,
                "coverageCount": "1/9",
                "status": "low"
            },
            {
                "filePath": "projects/edc-popover-ng/src/lib/config/popover-configuration-handler.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PopoverConfigurationHandler",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/edc-popover-ng/src/lib/config/popover-icon.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PopoverIcon",
                "coveragePercent": 28,
                "coverageCount": "2/7",
                "status": "medium"
            },
            {
                "filePath": "projects/edc-popover-ng/src/lib/constants/style.constant.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DARK_CLASS_NAME",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/edc-popover-ng/src/lib/constants/style.constant.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DEFAULT_ICON",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/edc-popover-ng/src/lib/constants/style.constant.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ERROR_ICON",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/edc-popover-ng/src/lib/constants/style.constant.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FONT_AWESOME_4_ICON",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/edc-popover-ng/src/lib/constants/style.constant.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FONT_AWESOME_5_ICON",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/edc-popover-ng/src/lib/constants/style.constant.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "IMAGE_BACKGROUND_SIZE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/edc-popover-ng/src/lib/constants/style.constant.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "IMAGE_CLASS_NAME",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/edc-popover-ng/src/lib/constants/style.constant.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "IMAGE_HEIGHT",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/edc-popover-ng/src/lib/constants/style.constant.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "IMAGE_WIDTH",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/edc-popover-ng/src/lib/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/edc-popover-ng/src/lib/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/edc-popover-ng/src/lib/errors/content-not-found.error.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ContentNotFoundError",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/edc-popover-ng/src/lib/help-popover.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "HelpPopoverDirective",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/edc-popover-ng/src/lib/help.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HelpComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "projects/edc-popover-ng/src/lib/help.module.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "HelpModuleConfig",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/edc-popover-ng/src/lib/services/edc-translation.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "EdcTranslationService",
                "coveragePercent": 28,
                "coverageCount": "2/7",
                "status": "medium"
            },
            {
                "filePath": "projects/edc-popover-ng/src/lib/services/help-config.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "HelpConfigService",
                "coveragePercent": 75,
                "coverageCount": "6/8",
                "status": "good"
            },
            {
                "filePath": "projects/edc-popover-ng/src/lib/services/help-error.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "HelpErrorService",
                "coveragePercent": 71,
                "coverageCount": "5/7",
                "status": "good"
            },
            {
                "filePath": "projects/edc-popover-ng/src/lib/services/help-icon.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "HelpIconService",
                "coveragePercent": 87,
                "coverageCount": "7/8",
                "status": "very-good"
            },
            {
                "filePath": "projects/edc-popover-ng/src/lib/services/help-popover.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "HelpPopoverService",
                "coveragePercent": 60,
                "coverageCount": "3/5",
                "status": "good"
            },
            {
                "filePath": "projects/edc-popover-ng/src/lib/services/help.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "HelpService",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "projects/edc-popover-ng/src/lib/translate/default-translations.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DEFAULT_LABELS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/edc-popover-ng/src/lib/translate/default-translations.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LABELS_EN",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/edc-popover-ng/src/lib/translate/default-translations.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LABELS_FR",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/edc-popover-ng/src/lib/translate/language-codes.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DEFINED_TRANSLATION_CODES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/edc-popover-ng/src/lib/translate/language-codes.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LANGUAGE_CODES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/edc-popover-ng/src/lib/translate/language-codes.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SYS_LANG",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/edc-popover-ng/src/lib/utils/global.utils.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "copyDefinedProperties",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/edc-popover-ng/src/lib/utils/global.utils.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "isFalse",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/edc-popover-ng/src/lib/utils/global.utils.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "isNil",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/edc-popover-ng/src/lib/utils/global.utils.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "isObject",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/edc-popover-ng/src/lib/utils/test-helpers.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "FakeTranslatePipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/edc-popover-ng/src/lib/utils/test-helpers.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "mock",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/edc-popover-ng/src/lib/utils/test-helpers.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "mockHelper",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/edc-popover-ng/src/lib/utils/test-helpers.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "mockService",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/edc-popover-ng/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/edc-popover-ng/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/app.module.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "ConfigLoader",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/config/config.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ConfigService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/config/edc-configuration.ts",
                "type": "class",
                "linktype": "classe",
                "name": "EdcConfiguration",
                "coveragePercent": 50,
                "coverageCount": "1/2",
                "status": "medium"
            },
            {
                "filePath": "src/config/edc-configuration.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PopoverConfig",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/config/popover-config-handler.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PopoverConfigHandler",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/edc-help.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "EdcHelpMain",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/edc-help.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}